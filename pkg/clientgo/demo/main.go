package main

import (
	"context"
	"crypto/tls"
	"crypto/x509"
	"encoding/base64"
	"encoding/json"
	"flag"
	"fmt"
	"github.com/erda-project/erda/apistructs"
	"github.com/erda-project/erda/pkg/clientgo"
	"github.com/erda-project/erda/pkg/clientgo/clientset/versioned/scheme"
	"github.com/erda-project/erda/pkg/clientgo/restclient"
	"github.com/erda-project/erda/pkg/customhttp"
	"github.com/gorilla/websocket"
	"github.com/sirupsen/logrus"
	"golang.org/x/crypto/ssh/terminal"
	"io"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/tools/cache"
	"k8s.io/client-go/tools/clientcmd"
	"k8s.io/client-go/tools/remotecommand"
	wathchtool "k8s.io/client-go/tools/watch"
	"k8s.io/client-go/util/homedir"
	"net/url"
	"os"
	"path/filepath"
	"time"
)

const (
	b64Str  = "YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSS1JFTkRRV2Q1WjBGM1NVSkJaMGxWUWpKaWVrNVNja3AzZWtFNE56Um1jRWMzTjNvNVVUbE9Sa3BWZDBSUldVcExiMXBKYUhaalRrRlJSVXdLUWxGQmQwZEVSVmROUWxGSFFURlZSVUY0VFU1aE0xWnBXbGhLZFZwWVVteGplVEZxV1ZSQlpVWjNNSGxOVkVFd1RXcE5kMDFFVlRKTlJFSmhSbmN3TUFwUFJFRTFUVVJuZDAxRVZUSk5SRUpoVFVKbmVFWnFRVlZDWjA1V1FrRk5WRVJYZERGWmJWWjVZbTFXTUZwWVRYUlpNa1YzWjJkRmFVMUJNRWREVTNGSENsTkpZak5FVVVWQ1FWRlZRVUUwU1VKRWQwRjNaMmRGUzBGdlNVSkJVVU5ZVjNCRWMyUjRNVmhMV2l0RUswWmpiMWRpYkN0dFluQldkMUZQV25nNE5td0tXR3RqWkVSaE0wNWljREprVDNwcU5ITkNVVTlIYW5ZemNHazFSWFp6T0VzelZFVjNlbWxtUTFkUlF6Wk9TMk5OVUdaaVFURnZUbHB0VVVaNlkwWndTd3BqV1RObk1EaFZiVXhQYkhod1pXdFJUa0pXZG1rMFdYSTFTMUEyYTJ4eFExcDVTa1prZVhWR09XNUpja2hNTjFFMVJWSXZSVE53Y21Nd2JHaG1NSEJYQ201WFMxWTNOVnBsZWs1M05EaFlWemhRWjB0VVVqTXlOMnBRZUV4NWVHMXlRMDFQU0dad04yazViM2hFTDFOa2JIZGFUa0o2YWxKV09HNHpVWE4yTDFvS016TnVTR2hRWkZJM01VVjNhMUZ0VGpCNFlpOW1UMjQ0U25Gb2FuVkNkWFJ4ZWpSSE4xQnhjMDU1TjJNMWJtaGxWVlkwTW5jMFRrOVNNSHBEWTFaS1pRbzBOM0ZOUnpRNVJXMVdURzA1TW1WVFlYaG9jbVZzV0hsc05YQnJNVnB6VEc4ek4ybzVUMDVSVFZwSlRtbzBNbUZKTHpCWVFXZE5Ra0ZCUjJwYWFrSnJDazFCTkVkQk1WVmtSSGRGUWk5M1VVVkJkMGxDUW1wQlUwSm5UbFpJVWsxQ1FXWTRSVU5FUVVkQlVVZ3ZRV2RGUTAxQ01FZEJNVlZrUkdkUlYwSkNVVzRLWjNONk9VaFRNV3AyTmtWdGNUbEZTSEI2VkhaTGVrZ3ZUa1JCWmtKblRsWklVMDFGUjBSQlYyZENVVzVuYzNvNVNGTXhhblkyUlcxeE9VVkljSHBVZGdwTGVrZ3ZUa1JCVGtKbmEzRm9hMmxIT1hjd1FrRlJjMFpCUVU5RFFWRkZRVlZ2SzFCdVFWcFlkVlpXYUVsaFJtcGhURU5aU25CelVpczRNRFkyV0hscUNrcHNRMmxGU25jNFlWUmlRakkzWlZWWFpUVXJZVTR5TDJOclpGcFdjM1I1V0hWbloyUlZSa2RrZVRKaU9YaHNiaXR3ZGpnd1pTc3hia3BIUkRSR1pUa0tRVVpRTlV0NkwwOUJiV015WmxRNVkwWjRUbU5YUmpSUFlVWlJXbVo1YW1wVWIwSkxXakEzVlhwTU5YSnNiVlJKWlV0c05DdG5VbmhZYlhKWVdtWTNiZ3BNWkdWNGJqVndMMnBLVTI5dFRYVjVPWFUwUWpWa1NrWkdPVmRLU1c0dmNtWmlZbXR3TjBwSmNsUk1hbTlzZUZOb1MxcDRjRkJYVWs1WldDc3ZSazFoQ2paQlRpdHdaa0pzVFRGTGJVcGtVRWQyZDNOaFl6QkhVRXhuZFV4SmFYQnBOVFZvTVhoWlJEaFBOMjVuWnpOelNGQmFWbmsyYjFGRFMzQnNaakIzTTJvS1QwY3JZVmg0UVU1UFZEaHdlRzVTTURCSldsZFpZVGhLZFc4NU5DOXBlV0ZLVEdzMmQySk1lRlpJYjI1V1dVOTNVVk5aTmxWQlBUMEtMUzB0TFMxRlRrUWdRMFZTVkVsR1NVTkJWRVV0TFMwdExRbz0KICAgIHNlcnZlcjogaHR0cHM6Ly8xMC4wLjYuMTk4OjY0NDMKICBuYW1lOiBkZWZhdWx0LWNsdXN0ZXIKY29udGV4dHM6Ci0gY29udGV4dDoKICAgIGNsdXN0ZXI6IGRlZmF1bHQtY2x1c3RlcgogICAgdXNlcjogZGVmYXVsdC1hZG1pbgogIG5hbWU6IGRlZmF1bHQtc3lzdGVtCmN1cnJlbnQtY29udGV4dDogZGVmYXVsdC1zeXN0ZW0Ka2luZDogQ29uZmlnCnByZWZlcmVuY2VzOiB7fQp1c2VyczoKLSBuYW1lOiBkZWZhdWx0LWFkbWluCiAgdXNlcjoKICAgIGNsaWVudC1jZXJ0aWZpY2F0ZS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSVWVrTkRRV3BsWjBGM1NVSkJaMGxWVG5RNVpsVktSbkJpUms4NU9XOW1UbEkzSzFZMVoyNU1lSEpqZDBSUldVcExiMXBKYUhaalRrRlJSVXdLUWxGQmQwZEVSVmROUWxGSFFURlZSVUY0VFU1aE0xWnBXbGhLZFZwWVVteGplVEZxV1ZSQlpVWjNNSGxOVkVFd1RXcE5kMDFFVlRKTlJFSmhSbmN3TUFwUFJFRTFUVVJuZDAxRVZUSk5SRUpoVFVSUmVFWjZRVlpDWjA1V1FrRnZWRVJ1VGpWak0xSnNZbFJ3ZEZsWVRqQmFXRXA2VFZKcmQwWjNXVVJXVVZGRUNrVjRRbkprVjBwc1kyMDFiR1JIVm5wTVYwWnJZbGRzZFUxSlNVSkpha0ZPUW1kcmNXaHJhVWM1ZHpCQ1FWRkZSa0ZCVDBOQlVUaEJUVWxKUWtOblMwTUtRVkZGUVRJMlYwMXdSazVpWnpaQ1VtSkZiRGxZZDFkelpWZDFWMjhyYkVGYVZURmFkMUJyWlV3M2JFMVpVekZyZDBkTFFtVXhLeXMwWjIxbVYwRTRkQW95ZDBVeGNGcDBjREIyU0doaFdsRldXRzV3VERoSksyTlVRVlpJUjJreE9VcEthRFJ3U0hvNGRXRlVTSEJwVWpjeU5sUlhkVGM0TjFGT00zcE1ZMkpuQ213elNYUkRVM1oyVG1KWlVqYzRjWEp1TWpSSWRVZDNUamhLT0U1TlkwdFNSMFozZFdvM1dYcEdNWEZhU2tNclJUSklTMmMwTlVNelpWSkVaSFZQYW1RS2FtaEVha2h2YkU1UFlVNUhSWGgxU1U1SlNWbElLMEpxU0UxWVZGbE9aSE14ZFdkaEwwaE9WVzFOUTA1M1IzSmlaRkEzUmpZMlpXaDFhRFpKZFhOM1RBcDZMMDFJYVU5TkswSXJTMjloWTJaQ1dXOW5iVWRoVlRrMFZDOXFhSFpYUkhSMlpHaDZVamcwTkhVMVlWVjFiMWROWVdGU1NXMXpXWGNyV0hkaFJXNWtDalYzVWtrM1dFSkhLMGhVYUhKRFp6QldNRUZLUW5Ca1pDOVJTVVJCVVVGQ2J6TlZkMk42UVU5Q1owNVdTRkU0UWtGbU9FVkNRVTFEUW1GQmQwVjNXVVFLVmxJd2JFSkJkM2REWjFsSlMzZFpRa0pSVlVoQmQwbDNSRUZaUkZaU01GUkJVVWd2UWtGSmQwRkVRV1JDWjA1V1NGRTBSVVpuVVZWWFdrRllPSGd4TkFwRk56Sk1OR2R1ZFdKbVNqbFZlR0ZQYm5CemQwaDNXVVJXVWpCcVFrSm5kMFp2UVZWS05FeE5MMUl3ZEZrM0syaEtjWFpTUWpaak1EZDVjM2d2ZWxGM0NrUlJXVXBMYjFwSmFIWmpUa0ZSUlV4Q1VVRkVaMmRGUWtGRU1IZzVlblpDVEdKSWNqSmpaRXRtWkU5SmFreFJjVGhEV21OdmVVcDFhREJwTDJwb2Iyd0tVQ3RLT0hkV09WTkJkVVU0VkRCTmRYTjNTalJXZFRFcldqTnROVkZqTHpWamJucHVlVlYzU0N0RmJXdzRablEwU25ab1RUVjVhM05XYWxoTVExWkhNd3B3UmxwdlVWUnJRbGxEUzBWeWVsZEhVazVWTkdWR2Frd3dMMEZsUzIxNFdIUkpVMnBVTm5Kc2RtOVNTMHMxYlhvNVdIUkViMWN5TjBKRWIzWjFVVEpTQ2pNclJsQmtLMWQxVjNoaVV6UlpTWEp1TkZsUmMyczNkR2wxTm5sUk9XZEtUSEF5TjNRMUsycEhjMU50VWxOek5ITnlhV0ZSTTFOSk9VVkdjMjAyY0VjS1EzWmtVbVZVZG5wbE1WcDRSemxSTVRKU1V5OVZWa0ZvZW5oWkx6Wk9UMVJUZDI1eGRrdGhWMkpZY1VrM1IyOW5WRmM1UzJwTGRETXdhalZYVEhwcFpnb3lOWFpYZDFGSGJIQXdSQzg1UjAxSWVWQXZVR2h4UnpNdmJWbDRkVGhKTlZoTVkybEpjbnBhTlRaalFraDRZejBLTFMwdExTMUZUa1FnUTBWU1ZFbEdTVU5CVkVVdExTMHRMUW89CiAgICBjbGllbnQta2V5LWRhdGE6IExTMHRMUzFDUlVkSlRpQlNVMEVnVUZKSlZrRlVSU0JMUlZrdExTMHRMUXBOU1VsRmIyZEpRa0ZCUzBOQlVVVkJNalpYVFhCR1RtSm5Oa0pTWWtWc09WaDNWM05sVjNWWGJ5dHNRVnBWTVZwM1VHdGxURGRzVFZsVE1XdDNSMHRDQ21VeEt5czBaMjFtVjBFNGRESjNSVEZ3V25Sd01IWklhR0ZhVVZaWWJuQk1PRWtyWTFSQlZraEhhVEU1U2twb05IQkllamgxWVZSSWNHbFNOekkyVkZjS2RUYzROMUZPTTNwTVkySm5iRE5KZEVOVGRuWk9ZbGxTTnpoeGNtNHlORWgxUjNkT09FbzRUazFqUzFKSFJuZDFhamRaZWtZeGNWcEtReXRGTWtoTFp3bzBOVU16WlZKRVpIVlBhbVJxYUVScVNHOXNUazloVGtkRmVIVkpUa2xKV1VnclFtcElUVmhVV1U1a2N6RjFaMkV2U0U1VmJVMURUbmRIY21Ka1VEZEdDalkyWldoMWFEWkpkWE4zVEhvdlRVaHBUMDByUWl0TGIyRmpaa0paYjJkdFIyRlZPVFJVTDJwb2RsZEVkSFprYUhwU09EUTBkVFZoVlhWdlYwMWhZVklLU1cxeldYY3JXSGRoUlc1a05YZFNTVGRZUWtjclNGUm9ja05uTUZZd1FVcENjR1JrTDFGSlJFRlJRVUpCYjBsQ1FVSllUelI0TjNoek9WWnRNVzgzUlFvMFZFUk9Sa2R1WkRFNVFXZGxZV1JXVUdOTlpVOVFVVTlHZEhCVVRXNTVlbWw0TW1aNlVXdFBXVmxpVW5kM1JFdHdkbEI0WTFac2FtTk1hMVl6WlZaTENtbFVNbmxXU21SeWMzSnhWSEEyWnpWb01Hb3hjUzlaVjNWVlpubDFWMVlyWjFZclZYaHBTbFJ3ZWtJeFdGcHNUREprVEdWVVRuSjBXQ3Q1UzBZck5ERUtZelJxU2tkaU1EVllXWE5EVVZoMlJYTXdOMHhxVm10V1VYSXhTREV4TkRoT01XVkpZWEp5V2pWR2JrZzRkVkJIZERaTE5XaEpPWGxzVkhsWWVrWldNZ3BEWkRjNFdVdzRVM05ZVEVOQ1MySllkek5wT0dWU1pGb3JTRVpXVW5wclNIVkNhMUp2Y0M5TFRITkVPVXhuVURkU1pDOVhPRTh4Wkd4dFFqVlBjQ3RCQ25sWmJtNURZWFZ0UXpGTEwzWnRUWEZUV0VNcmVXYzFVWG95Y0ZGVFl6bHdVak5SV0dobWEzZHlXbWhoTlhSRFZUbHRXbEpRYkRRNWFuTmxkVnBzV1RnS2VrZGxTR0U1VlVObldVVkJMMDlTU0ZrM1QwWnVVRzkzUTNaUmNWbExaVTh5VlZnek9VcEVlVEZJUjNwdlN5dG5lbGN6U1dGblZIYzVObFptYUZselNncHJUMHg2UVN0dllrUkpOVzF0TDFwWVpuSk1la3RhU1docFpHOWFjM1J0U1U0dmRUTnVSR1p1WVd4ME1UaHRjVnByVkhobmIyZDJTR2RpU0RoMFIyYzVDbmt5T0d3M056TnVkR1ZPUjNoVWVrTXlZMFJNYlVFNGNFVTBhMEZKYVRrMGVEaGxOWE5EVUZZNU1HRjRNblJaSzNoRlQzRnpjVTFEWjFsRlFUTnNhWEVLVmsxT016TTVNVFI1TWt0VGVYRmlTaXR4Tmt4VlRsUktVaTh2WkdkR1FuTkdRVXBPWmxNdlIwTTBORU5tV0dsbU1uUnNLMWQwWW10S1ZXVnhZMjVvWXdwYU5saGFNRlJZV1Vwc04yVnlOa05RY0VGcVZXczJNSFYzUjFRelpWcEZibGs1YzNCQlpIaFVkREUyS3pkd1lWUnZlbk5TWTNnMWFEUjZhWGRSVlZaWUNsSlNVRmxLZVhsbmJGbHpaR2sxVlZoQk1HWk5UVEZEYUZwTVR6QXJNVlV5VFhKRVFsWjBPRU5uV1VFdlZ6SlhlbE5qSzI5ek1XMUVPVkZaUlRkNFYzWUtkelJNUzJnclNDdGlXRzlIVVU1dU1XWmFTMlpXVW5WV2RqVXlPVEZGWVZOUlVHMUlUMjlwUzFSallsSlFhR1JRYVRjck1UUTBSalZwZFZkNlZrTktNd3BtUWpOV1EyOUNNSFZtVGtSNE5HTjJlSE5QYVRsWVlVaFFURTVHT0ROUEx6SjBibFJTVnpKbGRWSkZTelo0TUZvNWREVkxLekJzWTA1dkswNUJVREoxQ21RMVFrTXlPR1ZKVTNaTVYwVTJWRzlCVG1aelNuZExRbWREVVc0MVQweE9kV3hQUkRkNE1tSnNUMVY0VWtGNmIycDVNRUYyVVRWb1RrRkxiV3RVZVdJS2REQkJVa2xpU2taVlNFSlplV2d6VEZkcWJYQlZaMWxvTldwNWFFSTVNblUwV1VkamMwNDFhMlJQS3pSUE1FNW5WVVJyU0ZreEwxUjVNRFZSV2xWb1pRcHVaMlEwWWxsRFZ5OXdUa3hzZDNodVJWbHdXSFZZUlRacFlXSkVaMDVLZUhwTFpIRkpWamRRT1ZkcU5sRklhUzlHZUhsT1JYZEhUMGN6VEROUk1ETjNDalJwSzJaQmIwZEJRWEJSUzNWMlR6Qm5NR0Z3Y0RaV09GSmtkMkpCYVdGdFZsWkZjRmxITTJVM05XcHhSekJuY1VWTFUwMVBVRkpCV1VadVdHNUZXVUVLTlZOUGFVVldkRkJITHpkeVNGbGFXRVpXZW1oVlpEZHRabE5pVGtoMldXUmlRblZqUTFkR1F5dHNkakE1UjNaNWR6aEZkMjVqVDFoQ1Z6SndZVWN4YWdwS2ExRnBiRTlPUm5aVVIyUTBXa05ZVldabE1EUXpTM2xNT0c4M2JXUnNaMjkxY1UxaGVHMUlZbmhEVVVsTFZVbExUMUU5Q2kwdExTMHRSVTVFSUZKVFFTQlFVa2xXUVZSRklFdEZXUzB0TFMwdENnPT0="
	devHost = "https://10.0.6.198:6443"
	token   = "ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklteGtOSFUxTWpSMlgzRllhbnBrVWxkZmRUUlhZM05mWTBNNFVVOURRV05YTm5scFNqZ3RXV2QyWkUwaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUprWldaaGRXeDBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpXTnlaWFF1Ym1GdFpTSTZJbVJsZG1Wc2IzQXRkRzlyWlc0dGNHWjNkSE1pTENKcmRXSmxjbTVsZEdWekxtbHZMM05sY25acFkyVmhZMk52ZFc1MEwzTmxjblpwWTJVdFlXTmpiM1Z1ZEM1dVlXMWxJam9pWkdWMlpXeHZjQ0lzSW10MVltVnlibVYwWlhNdWFXOHZjMlZ5ZG1salpXRmpZMjkxYm5RdmMyVnlkbWxqWlMxaFkyTnZkVzUwTG5WcFpDSTZJbUUwWVdSbFl6QTBMVGRpT1dZdE5EWTFNeTFoWVRoaExXRTBOakExTWpRM05XUTROQ0lzSW5OMVlpSTZJbk41YzNSbGJUcHpaWEoyYVdObFlXTmpiM1Z1ZERwa1pXWmhkV3gwT21SbGRtVnNiM0FpZlEubS1GOEY1LVh3Um12YTNqUENpeDIzU1d0ZlhKNmdZUVFESjZ5eEFKbExzb3dZdnRMTzI2bjJ1dTVXQmRuQjk4aXVhZTg4MC0tOXptS0FWa3FBMHo1YllmX19DR1FBX2szUlE1V3V0NExsMDBGNXgxeVpld3ZpOTJvYXhYalhQcm1GZTNBRVYydldDbUNuaXR4X1hPRUpoUEZqZUxOODFhMy1tVy11dXN1SnNiVGJLdU5qd2Q5ZDZmcFlhZFdseDZMclA1RF81WGtJYVZfbDNTNi0xeWFERkZ6S19iNkVfTWhtMERyVjJ0U2g5U09IVERQWk1ibnlmd3JTUkQ1NzZfbVNIYnBzUWVlbjV2ZUxYSmRhdkZ2OWxvRThubVBubGY0My1jaWlKeVVJdEtyZWF2Qnc4RkxBVzZmSnFnWVk2cGpGWUJkdVdpMno2OGh0TEVYVVludlJB"
	host    = "https://10.0.6.198:6443/"
)

const (
	selfCa          = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01EZ3dNekV3TVRZd09Wb1hEVE13TURnd01URXdNVFl3T1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTWVVClM3cDI2YmhNQUlxRncydDc4VjAzWkoyNnRDSTUwU2tJZjlsV1VGbEtIUXRYYmJndUJSNFRlbjM3aXJUeUJIcm8KbStXSHFxNjIzMXpEZHNJQjVUb1MySVpNWm9nZEx6VkMxYzRLWE9oNXo3YlZmZnZXUnQ2czQ2bExRbzhDWVloRAppYlRMTTZBazlJejZJRHBJUHlYNjJ6REtkaEw5anFoWmpac3NRL3RTQVE0eDJyV2hSSjBvZEQ2ZzczQk1SV3lzCkJCbDVxRDEzeWF3MkJqMkkrbWEzQWxDRFFCL3NwMXZ3dUJCTEdNK01CdjZ4cG1EZndRTmVEb2srWU82Y3Z0cnYKdmdObndJUDAxRVQ3L2VmdldaTjE1TE1zMVZGU0w1WHdmUGZ0dDB2bnFtTWhEQjFYSGFaWUVjMkpFZTgra3NyTgpiSm9Fc3NYYkRCVEo1MXVzL0tVQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEWVBLcXFaWnBFcktkNmxTaHhVN1l1V014QS8KcXRpbjFNQldMWmdSWDcyWDN3UnRqbUYxQkhJZithRklRK296blpxQUNTNWRSV2JZdjhZSnd5bVBTUlZGcUxJWApMUDB4Y0diaDF4dW04ZmpxN3RhZGRRVzVxUk9IWUYyQmFHTUh5a0RNV3hsOTNvcmZMdmN3bGJjaGpWOGdBSVl0ClgyUXBxMVpYY0o5VlU0ZTVydHp6cXNsaVgzTUNwOFZzZnBSaGw3MnVIWkd3SXN1eTBRNk5kODZxZHcwclFGQ0cKa3F4WGcydGljczBmeURJY3FmQnNFaURhejgvelFWSnFrOTlFWW5mSmdqZmlYdGNyN1lPQlNvUkV6KzZkekV5TwpvZ1FSVXk4RWQ1YTFuQ3VDblVzSHBCM2dodGI2ODdwaFJYREVKMmozeEJuZmx3Z2IveEt0S2NBK2xZYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
	selfToken       = "eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRldmVsb3AtdG9rZW4tdGtxNjIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGV2ZWxvcCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImJkOGM1ODAyLWE2NDItMTFlYi1iZmUxLTUyNTQwMDk4OTVhNiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRldmVsb3AifQ.o7v8oi0U_N9i_DneL10kLqyUj917fNLVXKYlRTUnFBx-_BG2nFik0CyeuIEpeTcKNc8IAeCwZMyu45Bd9Nbno4gJLYSD148UPKtMfyUOT0VB4F97EEq6iR8CbUHG-Ce6OeWsGRnsnawH4kfenOagFUfHAMkzObd4WIfrRS4hDOTrodPximXTU0EQgHlZQK0D1bv-MPoOqoz28hIr0HFpwXTD-1bCccDySto7GpTXDj_jDG6cFrmDxx1I7oYcOenAoS1lyJ586TowbghhYuVmg33AuBfl6WCcatHLWxeD3ZedAz1UvbKwldac_qdXuXr1IUjNka8RrZXmjF0en_8_PA"
	selfTokenBase64 = "ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklpSjkuZXlKcGMzTWlPaUpyZFdKbGNtNWxkR1Z6TDNObGNuWnBZMlZoWTJOdmRXNTBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5dVlXMWxjM0JoWTJVaU9pSmtaV1poZFd4MElpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl6WldOeVpYUXVibUZ0WlNJNkltUmxkbVZzYjNBdGRHOXJaVzR0ZEd0eE5qSWlMQ0pyZFdKbGNtNWxkR1Z6TG1sdkwzTmxjblpwWTJWaFkyTnZkVzUwTDNObGNuWnBZMlV0WVdOamIzVnVkQzV1WVcxbElqb2laR1YyWld4dmNDSXNJbXQxWW1WeWJtVjBaWE11YVc4dmMyVnlkbWxqWldGalkyOTFiblF2YzJWeWRtbGpaUzFoWTJOdmRXNTBMblZwWkNJNkltSmtPR00xT0RBeUxXRTJOREl0TVRGbFlpMWlabVV4TFRVeU5UUXdNRGs0T1RWaE5pSXNJbk4xWWlJNkluTjVjM1JsYlRwelpYSjJhV05sWVdOamIzVnVkRHBrWldaaGRXeDBPbVJsZG1Wc2IzQWlmUS5vN3Y4b2kwVV9OOWlfRG5lTDEwa0xxeVVqOTE3Zk5MVlhLWWxSVFVuRkJ4LV9CRzJuRmlrMEN5ZXVJRXBlVGNLTmM4SUFlQ3daTXl1NDVCZDlOYm5vNGdKTFlTRDE0OFVQS3RNZnlVT1QwVkI0Rjk3RUVxNmlSOENiVUhHLUNlNk9lV3NHUm5zbmF3SDRrZmVuT2FnRlVmSEFNa3pPYmQ0V0lmclJTNGhET1Ryb2RQeGltWFRVMEVRZ0hsWlFLMEQxYnYtTVBvT3FvejI4aElyMEhGcHdYVEQtMWJDY2NEeVN0bzdHcFRYRGpfakRHNmNGcm1EeHgxSTdvWWNPZW5Bb1MxbHlKNTg2VG93YmdoaFl1Vm1nMzNBdUJmbDZXQ2NhdEhMV3hlRDNaZWRBejFVdmJLd2xkYWNfcWRYdVhyMUlVak5rYThSclpYbWpGMGVuXzhfUEE="
	selfHost        = "https://183.129.190.107:60066"
)

const (
	certBas64 = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURSekNDQWkrZ0F3SUJBZ0lJWTB3QUQ1dzlBYkl3RFFZSktvWklodmNOQVFFTEJRQXdhakVxTUNnR0ExVUUKQ2hNaFkySTVZalUyTWpnek5USTJOelJpTW1FNFlXSmxZak5sWVRBMVlUTXhOelF3TVJBd0RnWURWUVFMRXdkawpaV1poZFd4ME1Tb3dLQVlEVlFRREV5RmpZamxpTlRZeU9ETTFNalkzTkdJeVlUaGhZbVZpTTJWaE1EVmhNekUzCk5EQXdIaGNOTWpFd05URXlNRE15TVRBd1doY05NekV3TlRFd01ETXpNRFExV2pBME1SY3dGUVlEVlFRS0V3NXoKZVhOMFpXMDZiV0Z6ZEdWeWN6RVpNQmNHQTFVRUF4TVFhM1ZpWlhKdVpYUmxjeTFoWkcxcGJqQ0NBU0l3RFFZSgpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMY2VYbWV2aldxTmVCdW50Wk9qc3RId1BieUxidTBsCnFhV1hzYW1wS1hRMFRYVVBmUjM4SFlVaEYwV2xiWmxST3ZYNnJqZkhpU1hLaUROUEJGKzkxdTdscThQaVpmRTAKM2t1anNqWVF2UThCenA2YjhtdW4zWDE3Z0YzN3ZkNGxMU210TFRZYUk3WllrWGs1dVZaa0llbEg2ZVZQVThvMgo2ditsNHB3MU9hQThiTmd6VHE1T2hKWFA2eU10clBQM3BZTHh1N3RaKy9RdENya3dnaE5Bc1FZUlVuSGN0TWVtCmU3Um81SU1neFhVQUdxeGs1UW9tUzlPRU93K3MxOUxDc3MvZmM5VjU2LzVsZkVDWWh3MGZvWXRmSHZPQmpvbDkKM3d2azFNU3k4OUlOVWFHOU03amVYWUxZb0t5U3E4Smh4TXVoVUtxSXVpSlo5OER5YTlPQTBXY0NBd0VBQWFNbgpNQ1V3RGdZRFZSMFBBUUgvQkFRREFnV2dNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd01DTUEwR0NTcUdTSWIzCkRRRUJDd1VBQTRJQkFRQzBRV2sxK0N1RzBlVE5ucUxoem9mRUtKMnR0RE93T2NZY1VZWjF5UEpqLzB1bmM2emUKRFVvL3UxYWZiRDJxeGxXQTl3U3I5amZVQ1h2eUZ3ZFg0L2hwcG9sVVZVSnVMRXNWVkpvZ3JHZmRaY09VR3hkMQp4MVBGSWVsNWtXZUgxTUpVNGV0NzVDbVIrNi9TOTgxZDkvaW9FV05HUG0vcVlMV1k4RkRaK1ZJNmw0NStyTWRjClVUMVExVHZSeXNXOEVtem5FTm5DeUNOWnhZeW9EejM0d2FHeVhOS2FuYlhHeVVqRFhKLzVyakVFOVpLU1hBMFIKK0RaM0Y5S1Q4WTRJUlVLK3BZVlg2OW82RGRoN3JEbS9KaWJFSDdNeHFvemlYVG55ZVZsZmxWQmdmeFVzV2FSeApvYmR5SThweW9YKzBTb01HOCszZXZLUDkrOHd1ckhhSjZmcUQKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
	keyBas64  = "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdHg1ZVo2K05hbzE0RzZlMWs2T3kwZkE5dkl0dTdTV3BwWmV4cWFrcGREUk5kUTk5Ckhmd2RoU0VYUmFWdG1WRTY5ZnF1TjhlSkpjcUlNMDhFWDczVzd1V3J3K0psOFRUZVM2T3lOaEM5RHdIT25wdnkKYTZmZGZYdUFYZnU5M2lVdEthMHROaG9qdGxpUmVUbTVWbVFoNlVmcDVVOVR5amJxLzZYaW5EVTVvRHhzMkROTwpyazZFbGMvckl5MnM4L2VsZ3ZHN3Uxbjc5QzBLdVRDQ0UwQ3hCaEZTY2R5MHg2Wjd0R2prZ3lERmRRQWFyR1RsCkNpWkwwNFE3RDZ6WDBzS3l6OTl6MVhuci9tVjhRSmlIRFIraGkxOGU4NEdPaVgzZkMrVFV4TEx6MGcxUm9iMHoKdU41ZGd0aWdySktyd21IRXk2RlFxb2k2SWxuM3dQSnIwNERSWndJREFRQUJBb0lCQUdxMmwrMTBzTVRYakpjUgpOUS9FNWdEU01DZ2dXWlI1emxOaUEzY0x6Y3lhYmtrNXJZQTczRGdwQUpibHdPa0lIWVFiZ2t1ZlRKMXBXZFlNCnhrL0ZJZXcyaTlLcnJSelQ0bmZSL1pqa1NFam1sTEo1enR4T0J4V0pVMVZ4ejBRV0JpdXpjQldIUmlpTmxMbEEKbW5GdUNSVVpnNFRPcGRYQ0MxRFFLeTg5RlVmNjhSQUxvcGwvZEFZdDhMNnA2MUMwS2lGRFhLZWdZSXFGcmYveAoxSjZDV0pSZWxkM1BwSUIwTG5wcUpQamp5TzdXZlZ2bDdsdGZraEgvZDVOaDhIdUQ5c1UzQ0ZPZ1hVUHQ0YjZUClpzclU4WFQ1eFVtYWF3QVp5Uk9uWndDUVhUMnRMRVFZejV6ZzFNR0VLWUhBU1A4clcxb2tOZWNidVNkZWY1ekMKbTFHaE9vRUNnWUVBNzMySDF3L2U1K3B3MnV0WHFtcUo5VG05dkhyNU1rYStxMFFLYVBvcjhkVlFrMTRRNVZiRwpGT3FMWjExK2ZsNlFnYXpWT1ZTczJydVFWS2ZreEtGT2lNMFN3bU9yanlXTFh6MmdjaEREWHhrbDIzZ0NFQ0NhCkxjVjBRWUo4MHdVZmtwODcxUVVpY2NoV25oZktwaUFpVnNNbXBMTENUZ05lQlJ5RU5tT1NRVDBDZ1lFQXc3NEEKMFpDeHpPU2czZkVXblFKb1FPMHpsUUN4WWh4SWtJb1FNRjVRK1BPdVZxUnZxMHcvTnk0VmVlakVER2ZYT1d5Mwptdmd5UHhzTmQ5QmtNNWxZelBjN1NDbkk0eGVmMXdDdXNFckpkbVVRY05OVjlVYmNINlpzVWphVVRtVFVKNUZUCk9vV0I0NC9lNjN1NkhYSkhaeUhtV1JqTDQrVlhScVlocitLMXYzTUNnWUVBem5hSERFWDNZakkvdHN1YkdTU2QKNkpZdDEzYWdyTkpHZ0RtNVM4VVk2M1I5OFgzdnpQY2c3MWxBY3cwc0J0K1pidUhFTkplbUtTLzMvck43U25UUgowcWdRMnhxNEJVRlZ4UGJKQW0wbk1TM3A4Q21taGFiRnBGNE1tb2xXK1VqNmJobnVwL2UwT1NtQVd1eWgzTlBwCkpxazVBRlhIb3gvT0IxUU5PeUplTFBVQ2dZQnpVWE1HQTZyY1BTMlEwOEl3eWdSRmkvbEJwV0RibmpJYUJWeTQKUWppT0VuSDVWWEw4aGpVUCt6Um4xL3Y0R3cwdkpaK2R5dTgvUWw3UzRaREczV2IxaWdvQTM2MGNMUVRjRStqVwpyNWkxQ2FGLzl1SERXUFhDSjdmVlQ1WmNBUWNFTUpmSitIR25jVkV4aG5rRmRCZ2c2RlhlMDc3N0NsZzZwUkZmCm43N1hoUUtCZ0NpVXM1UGJpcms4OFVCQXFyZE1RTmNldzM5UFlsdmIrdGMrWmRwSVhHMGpnSmtIeGtCbjY1Q3kKblBtODBkZUNoZ0ZJQm5QUnhFRDZkUDlZUmpJVTZXcmlVamxEa2pINzVjZDFCQW5sY3NVS2dUd1NyblBzOWlzegpWbVBCUUNhMURDZWw4ZHlvd0d5MWF3a0ppNU9odUcrMkU5bmNlMkVlZmpuUXFtSnE1Y1pQCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
)

const (
	testACKHost  = "192.168.0.1:443"
	testACKToken = "eyJhbGciOiJSUzI1NiIsImtpZCI6IkVnN0g4NXdNR0NaeTJIdG10Nmx2UzZpb0NJcFNIU3ozOTVfWmk4RnA2RUkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi10b2tlbi1kOXp3bSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJhZG1pbiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImY2NWIwZTk3LWFiMzctNDk5My1iMDBiLTI1ZmQ4YjgyMDJhMSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlLXN5c3RlbTphZG1pbiJ9.a0FYPpaxjM6GNNMNcMFbykc7TOdrmNHJWQffZqwYFmOG_w_eoUuf6oU-o9VUK0b9DWWA31KMq-goHqpAZFxGWtNSarq6s9PENUH4ZeFGz5tftnY8A_tV26yLajnCwIhB6d3_IAortT669NlbUVVPNd-d97Etf9aE2wUNrIwWLiRlIkyh3IMqQb3UqLGPyez_Bs3t-lsGci_YP9qG7CpCoDuhkCoNAUqydQfx9vGmn8_VKUEhGZo6jHkaADuBRAHuutPxnQJZwCMd_x8jFe_-w4gJEunGyLVrOTcSRi5DiXSi7f90h7mexNJ64fq56pTZtNzzYPQO4kaaDqWF6IV34A"

	testEnvCaBase64 = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKRENDQWd5Z0F3SUJBZ0lVWE5VS0V5c2kxQmp6bStUSStZb21BUWU4aXRBd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0dERVdNQlFHQTFVRUF4TU5hM1ZpWlhKdVpYUmxjeTFqWVRBZUZ3MHlNVEExTVRrd09UUXhNREJhRncwMApPREV3TURRd09UUXhNREJhTUJneEZqQVVCZ05WQkFNVERXdDFZbVZ5Ym1WMFpYTXRZMkV3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURZZWl3emU4cW1CQm9iZVVDdmxMeEYzMlhZY0grZG9rcisKdVZUSFIxcUpvdThZamlNUzh3K0x4MmZaTzVIQjJKbnNjVW8yWk04amNGYnEraUxYQTJSUTBtL0xWU0pjKzgzUwpSdGxCK0trT2NjdUZlNXJ4MU50OFFtNEdjZFdDZzBJbkd6US9QNGVQSlhJTENlUTZTWEFCbDEycWc5cGpyZXlFCjl3am5hVVpaZjVvNVNxM3RUSWZuaE1GdnQ1ZG5PSGloU0x6RDZqbWcrL21qdWVNbjVNKzNYSWtwVG13RUg1dDkKNm9yTS9hdm5UVkhDUGYxaVV5ekgzNC9KUXdyWmcwTUE1WnMxVGlYVjZrQm9OWHo5NjJGb3FVTTk0UFJqYmdSUgpLcHVTd2ZsL0gzeGt6RVBlSmVCcGZ1UEcxNWVlMzBTSGQ3VlgvUkZQM2JQNWtnOGw5N2lGQWdNQkFBR2paakJrCk1BNEdBMVVkRHdFQi93UUVBd0lCQmpBU0JnTlZIUk1CQWY4RUNEQUdBUUgvQWdFQ01CMEdBMVVkRGdRV0JCUlQKUGl6MWE3WE9PTlJCT3U2VVFkTWFWUVVzd2pBZkJnTlZIU01FR0RBV2dCUlRQaXoxYTdYT09OUkJPdTZVUWRNYQpWUVVzd2pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUd3SjliQlB5bGJIUE9idERydmR5YjJaRWJLcnAzYkwyCm80R2FMeU5FZ1MrQk5mZXNucHNVZExtVUdlU2MxaVQ2Q05jQnJPRmZnbjZOclZBOXpmNHg4K1ovK2owSGQ5WUgKQmNVZ2NNdi9ERW5YbXdTT1Rma3ZDUjdielJYUFdwa0FBOEp1d285ZDJ0dk9ONGp4TEw4cDRIMFlUZlZraEJxdAp6eGZxeE5aZDlqVy91bEptVjFWaVFSQ1piYzJlZFpoN1htTHZ5SFljQjlsWE9waWNXQ1JUN2lSb0NNUFVPQ0JiCjZrWDNYc3hLRk0zaEdIbzhHNVhnczVTSmJkUjN6NC9Jcy9sL1k3Y3BrU0NkY3diQU5ibEVrb3RkeTZseHM5MVcKbWYwS0N6WXFvZUZNemtNRXhuZENDQ01pcEpybG9GRlNQRmhvemJ5QjdqT1QvZ3NnSzFBWnNnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
	testEnvToken    = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjF1eVZTMVlSbDJsd1hyb0kzdE1pd1U3TlNYX1FkdURnWDZOdE4tcGQ0ZjgifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tZzYyNWgiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImZjN2M3ODUzLTYwZGMtNGI1Ni1hOTg0LTJmMmI2ZTVkYjEzMiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.KuMIA9MN64bp03Ih7VNz5vriVRiWQE7rbeNuizP6Q-BCR-TH4bzc34oLdT7Vl1RpTmuVx4cKhsOHYghsvQ38P9K40zeTMIWa0aOuMHKpqlzwfVJQ4x-Cc_VTUF76OC2YKMbgB11lQy9qPpb12Dn1Wf7qJ7Q7vsv8bHKbuwm0_qwRthrhA4XBE-E9YtU2jRV1cTQDxBQebMaBiwfn0f7SdUhS6fy6cqFIhdjQ0zU7z1RYXv3Yqp_IyvnSVjZ08IRWMtzU4VKRw-J5uyFjNibS1ByHYHmzGCcsO2kDZmKLL5H8C1bwfLdyxL2RJUV95ARvB4lrDxEHoYtMb5FigiSx9w"
	testEnvHost     = "10.96.0.1:443"
	testEnvCertData = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUekNDQWplZ0F3SUJBZ0lVTWJVd2JsNWg0SURtZ1c1MHJGSS9HVlNJcjBVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0dERVdNQlFHQTFVRUF4TU5hM1ZpWlhKdVpYUmxjeTFqWVRBZUZ3MHlNVEExTVRrd09UUXhNREJhRncwMApPREV3TURRd09UUXhNREJhTURReEZ6QVZCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6TVJrd0Z3WURWUVFECkV4QnJkV0psY201bGRHVnpMV0ZrYldsdU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQXRoUkJENmRzVXlRZ1FKZzFYMHFKcjNEVTFBYU5xM2UxZG55dzdLNzRQREUvY0FUWndLS25kcklpS3c5SAovZE5rY3VwMTBVa1JPQlZiOUorWng0NitRcU1lUEIzK3BYYjd6Mk0rTjJHWTRUWXd3bVFPU2V0eFhmNHlIQkVDCmdNZUh5ZG16NE0rengxTW5yZVhSUC9MMUt4cnY4c1ZLWjN1MWRyeDFNclgzYXBnRldGUjVBRHRhUDlPdEQ4MlEKSjBEai9SOWJEQzJBOGtrNU05YUU4bWVMTjBSWExQZG9wMWU1WG5PR3lZZDlWZGNWd1YzRW5GNFMrTTNxYVJTVgpWckgxSVUwOUQrZGU3dzY5c2NCSWllUWNydnpaRGRkREhHdy9IL1hkQlliSEVPTmZqUXRoNjN6RVNTZGZzR05LCjBFd0VZeUZDNEZUWXhBeXRaN0dWejVqZGdRSURBUUFCbzNVd2N6QU9CZ05WSFE4QkFmOEVCQU1DQmFBd0V3WUQKVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWRCZ05WSFE0RUZnUVVOSEpDVDRnMQozRFRYZUwzOXZ5UWo1WXd6RElNd0h3WURWUjBqQkJnd0ZvQVVVejRzOVd1MXpqalVRVHJ1bEVIVEdsVUZMTUl3CkRRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBVnZyU05weVh1Yzg4TzQ0UVljSGErbHhHZnlEb0lMSThBUDJNTUMKR2ZrbXFGbDh5QXAwNVlDT0w0N1NSVHBraGNoUUlndEx0UndQTEE5dW5TWGRJRUZ4L2RmNUNnUVJDRzhCMHFlNwpabjFCOUZRa2phNzJ4bEk0WHVwTi9XamVabG1JZU5yZHRMMlBpQ1RGTkVNYVIzTGkyVVYzSGRzUjQ4MVg3eHp0ClYvYlVyOVNGWDVMd3RxQjFFNEIwRk5qemhHQk9CR1A2ZmtuNjBoaXV4NW45cm44NllncUpQOWpsdWtoKzY2TGwKZmdaMndudnlLYUJxN2tuTkpkZk1mV3hUTW56WUVKb2Y2UFNmaWRKS0lLWnZJMVZhc3FsSHUrd1hvZW1Pamk0bwpySjlGNmxaV1VGOTh3YlFNbTkwRURnUy9pNmc4SGc5bTNENXV2eUp2aTlLWFAyWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
	testEnvKeyData  = "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdGhSQkQ2ZHNVeVFnUUpnMVgwcUpyM0RVMUFhTnEzZTFkbnl3N0s3NFBERS9jQVRaCndLS25kcklpS3c5SC9kTmtjdXAxMFVrUk9CVmI5SitaeDQ2K1FxTWVQQjMrcFhiN3oyTStOMkdZNFRZd3dtUU8KU2V0eFhmNHlIQkVDZ01lSHlkbXo0TSt6eDFNbnJlWFJQL0wxS3hydjhzVktaM3UxZHJ4MU1yWDNhcGdGV0ZSNQpBRHRhUDlPdEQ4MlFKMERqL1I5YkRDMkE4a2s1TTlhRThtZUxOMFJYTFBkb3AxZTVYbk9HeVlkOVZkY1Z3VjNFCm5GNFMrTTNxYVJTVlZySDFJVTA5RCtkZTd3NjlzY0JJaWVRY3J2elpEZGRESEd3L0gvWGRCWWJIRU9OZmpRdGgKNjN6RVNTZGZzR05LMEV3RVl5RkM0RlRZeEF5dFo3R1Z6NWpkZ1FJREFRQUJBb0lCQVFDY1EzTzI4SlFhSXBYLwplZUhNWDFjZEYzUEFaOE5zRmpmSmNhZ1I2UFFvRElnS0prK1BjTWpTS0gwRWdYL2lpbXJaNlBpbVhkUUdVdVp4Cllnd0RaVEZLVlYzY2NFMmNTaXBBU1VjYkZvcXpOZVBRNFRnV0hwZFQrSldlMnNaUUtXNFRRT0NNbnhVR2l3b3gKeDF1M1MxYzM0RTF3Qi93Y0plS04vWjJEb1FHdkcwZXlqNVdYMyt1a3AwVGcwZ3piWmhJQWNubXM4elpMKzZITwpaUGNOcmVjY2lwaHRkTExOQXEycWEraVNEd3o3bFZ2bW1aUklSR0pqS1pKR2JUQ1BtM29Eakl4ZkVwamNkMlBiCjNmRWd2YTdUY3g2bEt1YWRkTTAwY2ZKWkR5SFE2OWxpUGkvMlArN0ExQWd0Y2tzWXZsV0luQzRzZzh6V1Rlc08Kd3dmdC8veGxBb0dCQU10TWZkc1d5Qmh4OUVkem1UUWJETlBycFU1S3RFWGFqYldsSlJDbkpQeldHME9Cc3Q4ZQpSZFNvK1gyVjVheVFoVGtSTDRvR3l5SlFaRDc0YTZKL082MGQvODhqSU5IRFBUS2RIR1cwdkZUU0htWkNlVFI2CnE0L0YrVWVIWnMzdGJwQ3BOQnR4ZDJJOW5LditBRkJJYkluUWo2UFZ3cWsyR21yNWRGdXl0azBMQW9HQkFPVkgKaitLMTViMHN5bFNBS0kzcytjcmRXdTBPbTgyU3dFeHFhTmVIR24vTnRmekMwUksvS3NLQ0l6WVZsdG5JMFg1VApqTzJmbHIzK0VXUWIxZmFRMG9UOVMrUXZJZDFBRUFHOTlSeklzdUd0cVM1OURseHhaQk9xY1crYkY5WHRmK1R1CnZUd3loR2J4a0E4ZHk3TzFnU2JrcHZTSGZNMFhUK3MvYjM3UENCOGpBb0dBYXF1SkFmTHpMTGhtRnpPVmVGeVYKSDREdWJLVVA3L01jRmVwQUIzdmNFWG42TmpLUWV6ZTBKa0EvSUdFTmNMMG4yZWlsakFQQ2hBK3dlY1g1Ry9zcwpnY3BTMWdtMWg3cXNtcWtMSkdadnh3VzFBNnp2VWRUbnZmbC9zY05lOHNBWkduaGRxZVNnWW9DM2V4czhhT09IClo4eHlBZUlBVUs3ZHI3R1NGeWN2Tmo4Q2dZQm15N0hvSEZPWGdHaHFnRmN1WXF3UDF6UzRDZyt5bUhRZERxeFkKelZzRkorN0xGM0Z6YlVBM211ODhoV3R2MDBpUjBkWGloK1dtNHkxYTY5di9ReWtQdFJ6OGZtRTVlRXAwN1h6aQozZHpOci9XbFFTNWFKZ0NQaktCMVFGenNiaUlrT3lHZXhxdDBHQ1BWa3k5TU1EbHFmYU9aQ05IY2hmSXY3KzRHCk5iNVhid0tCZ0VKNG9jM0lwTHo5N0wzUWRxRU50eks1ejFmbkxCUXZJNDM4VjY0WHExSkhqbjFHSUo1UGtnZHoKNW0xVUhhbG54Z0lEbHExZ20rVmh3b0xxUTNKOHhwZTE2dGd4dkNGQzBlQXNIYmc5TEdvT0RDN2dNWVY2SDdNTApOYjBaZHMyeTVPQzRMSk93M0Q4UzMvNG5iOW5xTm5tY1cwU0NlU0FTbVhKRDVlVElEQUhkCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
)

type ClusterMetaData struct {
	ClusterName    string                    // 集群名称
	DisplayName    string                    // 集群显示名称
	ClusterType    string                    // 集群类型 'dcos','edas','k8s','localdocker','swarm'
	ManageType     string                    // 集群管理方式 'inet', 'kubeconfig', 'sa', 'proxy'
	ManageConfig   ManageConfig              // 管理配置信息, address ca client-cert client-key token
	WildcardDomain string                    // 泛域名
	CloudVendor    string                    // 云服务供应商，'erda', 'alicloud-ecs', 'alicoud-cs', 'alicoud-cs-managed'
	ExecutorConfig map[string]ExecutorConfig // 执行器配置， ExecutorName: ExecutorConfig
}

type ManageConfig struct {
	Address  string // 集群入口, inet(兼容) 或者 apiServer 地址
	Insecure bool   // true： 不进行地址证书有效性验证
	CaData   string // Ca 证书，base64 编码后
	CertData string // Client 证书，base64 编码后
	KeyData  string // Client 证书 key，base64 编码后
	Token    string // Token
}

type ExecutorConfig struct {
	Kind    string            // 执行器类型
	Options map[string]string // 不同环境超买比，Spark Version，以及一些开关
}

func ma2in() {

	var kubeconfig *string
	if home := homedir.HomeDir(); home != "" {
		kubeconfig = flag.String("kubeconfig", filepath.Join(home, ".kube", "config"), "(optional) absolute path to the kubeconfig file")
	} else {
		kubeconfig = flag.String("kubeconfig", "", "absolute path to the kubeconfig file")
	}
	flag.Parse()

	config, err := clientcmd.BuildConfigFromFlags("", *kubeconfig)
	if err != nil {
		panic(err)
	}
	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		panic(err)
	}

	// 初始化pod所在的corev1资源组，发送请求
	// PodExecOptions struct 包括Container stdout stdout  Command 等结构
	// scheme.ParameterCodec 应该是pod 的GVK （GroupVersion & Kind）之类的
	req := clientset.CoreV1().RESTClient().Post().
		Resource("pods").
		Name("nginx-b1a7854841-cf97759-pnpv5").
		Namespace("project-2-dev").
		SubResource("exec").
		VersionedParams(&corev1.PodExecOptions{
			Command: []string{"bash"},
			Stdin:   true,
			Stdout:  true,
			Stderr:  true,
			TTY:     false,
		}, scheme.ParameterCodec)

	// remotecommand 主要实现了http 转 SPDY 添加X-Stream-Protocol-Version相关header 并发送请求
	exec, err := remotecommand.NewSPDYExecutor(config, "POST", req.URL())

	// 检查是不是终端
	if !terminal.IsTerminal(0) || !terminal.IsTerminal(1) {
		fmt.Errorf("stdin/stdout should be terminal")
	}
	// 这个应该是处理Ctrl + C 这种特殊键位
	oldState, err := terminal.MakeRaw(0)
	if err != nil {
		fmt.Println(err)
	}
	defer terminal.Restore(0, oldState)

	// 用IO读写替换 os stdout
	screen := struct {
		io.Reader
		io.Writer
	}{os.Stdin, os.Stdout}

	// 建立链接之后从请求的sream中发送、读取数据
	if err = exec.Stream(remotecommand.StreamOptions{
		Stdin:  screen,
		Stdout: screen,
		Stderr: screen,
		Tty:    false,
	}); err != nil {
		fmt.Print(err)
	}
}

func main123123() {
	req, err := customhttp.NewRequest("GET", "inet://yurt.dev.terminus.io?ssl=on/kubernetes.default.svc.cluster.local", nil)
	if err != nil {
		logrus.Errorf("[viper] failed to customhttp.NewRequest: %v", err)
	}

	//header := http.Header{}

	namespace := "default"
	//podname := "dice-soldier-6b476c58ff-zz4zb"
	//containername = "soldier"
	podname := "cluster-agent-5d696f9485-b9n9p"
	path := fmt.Sprintf("/api/v1/namespaces/%s/pods/%s/exec", namespace, podname)
	execURL := url.URL{
		Scheme: "wss",
		//Host:     "10.0.6.198:6443",
		//Host: "183.129.190.107:60066",
		Host:     "192.168.0.1:443",
		Path:     path,
		RawQuery: "",
	}
	//selfTokenBase64 := "ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklpSjkuZXlKcGMzTWlPaUpyZFdKbGNtNWxkR1Z6TDNObGNuWnBZMlZoWTJOdmRXNTBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5dVlXMWxjM0JoWTJVaU9pSmtaV1poZFd4MElpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl6WldOeVpYUXVibUZ0WlNJNkltUmxkbVZzYjNBdGRHOXJaVzR0ZEd0eE5qSWlMQ0pyZFdKbGNtNWxkR1Z6TG1sdkwzTmxjblpwWTJWaFkyTnZkVzUwTDNObGNuWnBZMlV0WVdOamIzVnVkQzV1WVcxbElqb2laR1YyWld4dmNDSXNJbXQxWW1WeWJtVjBaWE11YVc4dmMyVnlkbWxqWldGalkyOTFiblF2YzJWeWRtbGpaUzFoWTJOdmRXNTBMblZwWkNJNkltSmtPR00xT0RBeUxXRTJOREl0TVRGbFlpMWlabVV4TFRVeU5UUXdNRGs0T1RWaE5pSXNJbk4xWWlJNkluTjVjM1JsYlRwelpYSjJhV05sWVdOamIzVnVkRHBrWldaaGRXeDBPbVJsZG1Wc2IzQWlmUS5vN3Y4b2kwVV9OOWlfRG5lTDEwa0xxeVVqOTE3Zk5MVlhLWWxSVFVuRkJ4LV9CRzJuRmlrMEN5ZXVJRXBlVGNLTmM4SUFlQ3daTXl1NDVCZDlOYm5vNGdKTFlTRDE0OFVQS3RNZnlVT1QwVkI0Rjk3RUVxNmlSOENiVUhHLUNlNk9lV3NHUm5zbmF3SDRrZmVuT2FnRlVmSEFNa3pPYmQ0V0lmclJTNGhET1Ryb2RQeGltWFRVMEVRZ0hsWlFLMEQxYnYtTVBvT3FvejI4aElyMEhGcHdYVEQtMWJDY2NEeVN0bzdHcFRYRGpfakRHNmNGcm1EeHgxSTdvWWNPZW5Bb1MxbHlKNTg2VG93YmdoaFl1Vm1nMzNBdUJmbDZXQ2NhdEhMV3hlRDNaZWRBejFVdmJLd2xkYWNfcWRYdVhyMUlVak5rYThSclpYbWpGMGVuXzhfUEE="
	//res := "eyJhbGciOiJSUzI1NiIsImtpZCI6IkVnN0g4NXdNR0NaeTJIdG10Nmx2UzZpb0NJcFNIU3ozOTVfWmk4RnA2RUkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRpY2Utb3BlcmF0b3ItdG9rZW4teHo1em0iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGljZS1vcGVyYXRvciIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjliNDA2ZGNlLTg0OTgtNGFiNi1hZTJjLTE1NDRkNDFhODI2YiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRpY2Utb3BlcmF0b3IifQ.iz8TjiAY5LzRBk3zt3td1LcrWFP0dAqgLOFXJQ9gVxTcoFLgCzztzzKKJs2xn3q0nEyf56yFfcYcvFuW7rZ2xMvInQC-kPCOpGBpEReR-ZFdI_ONlvq-73GjZI-z-4ijUmg4ioWGe87ab3nS3ddEx4lAhWl4zqgYCVgcwIIwdXrmGWiNVbv0ar-39YbXA4zHEvOvlHGJb3Uvu_fPWzdUIWybUQfezMAqtmuQjZkDXzpIOsR9ABbwTj6dpiy0VCWwAN1r538u28vqi8u672UCMRjMSvNJHHeleUvMXB8vS4kr7pNgCgXq7T1KNfVOozHQ__uMFAqNV3wI9e-LU44hhg"
	res, err := base64.StdEncoding.DecodeString(selfTokenBase64)
	if err != nil {
		logrus.Error(err)
	}
	req.Header.Add("Authorization", "Bearer "+string(res))
	logrus.Infof("[viper] %s", "use token")
	dialer := websocket.DefaultDialer
	//dialer.NetDialContext = clusterdialer.DialContext("viper")
	pool := x509.NewCertPool()
	caByes, err := base64.StdEncoding.DecodeString(selfCa)
	if err != nil {
		logrus.Error(err)
	}
	//certByes, err := base64.StdEncoding.DecodeString(certBas64)
	//if err != nil {
	//	logrus.Error(err)
	//}
	//keyByes, err := base64.StdEncoding.DecodeString(keyBas64)
	//if err != nil {
	//	logrus.Error(err)
	//}
	pool.AppendCertsFromPEM(caByes)
	//_, err = tls.X509KeyPair(certByes, keyByes)
	//if err != nil {
	//	logrus.Fatalf("LoadX509KeyPair: %v", err)
	//}
	dialer.TLSClientConfig = &tls.Config{
		//NextProtos: []string{"http/1.1"},
		RootCAs: pool,
		//Certificates: []tls.Certificate{pair},
	}
	fmt.Println(req.Header)
	conn, _, err := dialer.Dial(execURL.String(), req.Header)
	if err != nil {
		logrus.Errorf("[viper] failed to connect to %s: %v", execURL.String(), err)
		//return nil, err
	}
	fmt.Println(conn)
}

func main() {
	cfg, err := restclient.GetDialerRestConfig("terminus-test", &apistructs.ManageConfig{
		//Address: "https://10.0.6.198:6443",
		//Address: selfHost,
		Address:  testEnvHost,
		Insecure: true,
		//CaData: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01EZ3dNekV3TVRZd09Wb1hEVE13TURnd01URXdNVFl3T1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTWVVClM3cDI2YmhNQUlxRncydDc4VjAzWkoyNnRDSTUwU2tJZjlsV1VGbEtIUXRYYmJndUJSNFRlbjM3aXJUeUJIcm8KbStXSHFxNjIzMXpEZHNJQjVUb1MySVpNWm9nZEx6VkMxYzRLWE9oNXo3YlZmZnZXUnQ2czQ2bExRbzhDWVloRAppYlRMTTZBazlJejZJRHBJUHlYNjJ6REtkaEw5anFoWmpac3NRL3RTQVE0eDJyV2hSSjBvZEQ2ZzczQk1SV3lzCkJCbDVxRDEzeWF3MkJqMkkrbWEzQWxDRFFCL3NwMXZ3dUJCTEdNK01CdjZ4cG1EZndRTmVEb2srWU82Y3Z0cnYKdmdObndJUDAxRVQ3L2VmdldaTjE1TE1zMVZGU0w1WHdmUGZ0dDB2bnFtTWhEQjFYSGFaWUVjMkpFZTgra3NyTgpiSm9Fc3NYYkRCVEo1MXVzL0tVQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEWVBLcXFaWnBFcktkNmxTaHhVN1l1V014QS8KcXRpbjFNQldMWmdSWDcyWDN3UnRqbUYxQkhJZithRklRK296blpxQUNTNWRSV2JZdjhZSnd5bVBTUlZGcUxJWApMUDB4Y0diaDF4dW04ZmpxN3RhZGRRVzVxUk9IWUYyQmFHTUh5a0RNV3hsOTNvcmZMdmN3bGJjaGpWOGdBSVl0ClgyUXBxMVpYY0o5VlU0ZTVydHp6cXNsaVgzTUNwOFZzZnBSaGw3MnVIWkd3SXN1eTBRNk5kODZxZHcwclFGQ0cKa3F4WGcydGljczBmeURJY3FmQnNFaURhejgvelFWSnFrOTlFWW5mSmdqZmlYdGNyN1lPQlNvUkV6KzZkekV5TwpvZ1FSVXk4RWQ1YTFuQ3VDblVzSHBCM2dodGI2ODdwaFJYREVKMmozeEJuZmx3Z2IveEt0S2NBK2xZYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
		//CaData: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01EZ3dNekV3TVRZd09Wb1hEVE13TURnd01URXdNVFl3T1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTWVVClM3cDI2YmhNQUlxRncydDc4VjAzWkoyNnRDSTUwU2tJZjlsV1VGbEtIUXRYYmJndUJSNFRlbjM3aXJUeUJIcm8KbStXSHFxNjIzMXpEZHNJQjVUb1MySVpNWm9nZEx6VkMxYzRLWE9oNXo3YlZmZnZXUnQ2czQ2bExRbzhDWVloRAppYlRMTTZBazlJejZJRHBJUHlYNjJ6REtkaEw5anFoWmpac3NRL3RTQVE0eDJyV2hSSjBvZEQ2ZzczQk1SV3lzCkJCbDVxRDEzeWF3MkJqMkkrbWEzQWxDRFFCL3NwMXZ3dUJCTEdNK01CdjZ4cG1EZndRTmVEb2srWU82Y3Z0cnYKdmdObndJUDAxRVQ3L2VmdldaTjE1TE1zMVZGU0w1WHdmUGZ0dDB2bnFtTWhEQjFYSGFaWUVjMkpFZTgra3NyTgpiSm9Fc3NYYkRCVEo1MXVzL0tVQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEWVBLcXFaWnBFcktkNmxTaHhVN1l1V014QS8KcXRpbjFNQldMWmdSWDcyWDN3UnRqbUYxQkhJZithRklRK296blpxQUNTNWRSV2JZdjhZSnd5bVBTUlZGcUxJWApMUDB4Y0diaDF4dW04ZmpxN3RhZGRRVzVxUk9IWUYyQmFHTUh5a0RNV3hsOTNvcmZMdmN3bGJjaGpWOGdBSVl0ClgyUXBxMVpYY0o5VlU0ZTVydHp6cXNsaVgzTUNwOFZzZnBSaGw3MnVIWkd3SXN1eTBRNk5kODZxZHcwclFGQ0cKa3F4WGcydGljczBmeURJY3FmQnNFaURhejgvelFWSnFrOTlFWW5mSmdqZmlYdGNyN1lPQlNvUkV6KzZkekV5TwpvZ1FSVXk4RWQ1YTFuQ3VDblVzSHBCM2dodGI2ODdwaFJYREVKMmozeEJuZmx3Z2IveEt0S2NBK2xZYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
		//CaData: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQ2ekNDQXRPZ0F3SUJBZ0lETVU0bE1BMEdDU3FHU0liM0RRRUJDd1VBTUdveEtqQW9CZ05WQkFvVElXTmkKT1dJMU5qSTRNelV5TmpjMFlqSmhPR0ZpWldJelpXRXdOV0V6TVRjME1ERVFNQTRHQTFVRUN4TUhaR1ZtWVhWcwpkREVxTUNnR0ExVUVBeE1oWTJJNVlqVTJNamd6TlRJMk56UmlNbUU0WVdKbFlqTmxZVEExWVRNeE56UXdNQjRYCkRUSXhNRFV4TWpBek1qRXdNRm9YRFRReE1EVXdOekF6TWpZeE1Wb3dhakVxTUNnR0ExVUVDaE1oWTJJNVlqVTIKTWpnek5USTJOelJpTW1FNFlXSmxZak5sWVRBMVlUTXhOelF3TVJBd0RnWURWUVFMRXdka1pXWmhkV3gwTVNvdwpLQVlEVlFRREV5RmpZamxpTlRZeU9ETTFNalkzTkdJeVlUaGhZbVZpTTJWaE1EVmhNekUzTkRBd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDNTVFVU9vengxSDZDVlR6b1Z5YittditWamI4UEsKY2lVY1d5Ry8rZnhjR2p5VzRQeUpPQTE1S1pLUGtoUklWV2N0amlQVE50ZDNyTUwvRU8xMkFPTksva3NNeW15SgpuWFp6YUw5VmtQcHFyeDVWdG1FM3VUd0RFZ0lSbkM2amVMVWZGRkpoSFY2a0pTREtMdXIwUG1CTTJER0dWZHRECktqSjk2amIydFJrbFpWRVlZMElqaHZYSFF6d3dDM2E1OEh6ajYwQ015NmFzYzBKbUdLZVdxUERMdEgrUVlYSG4KYjQ1cGhvWHVNOFJMbnpBTGx3RWNzS0VsV1hCOVlremtPQVlZMzJtUWxnbEJLdnNlemNxY2V5VVBJZnVwWG1sMwpZNEd1d3Y4bUxpcEFKSWxqZ0VxSFlCcUV6NjhZdFYrekh3UHQwRDZMOVRudGZXMVFYancwRUJhOUFnTUJBQUdqCmdaa3dnWll3RGdZRFZSMFBBUUgvQkFRREFnS3NNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdQQVlJS3dZQkJRVUgKQVFFRU1EQXVNQ3dHQ0NzR0FRVUZCekFCaGlCb2RIUndPaTh2WTJWeWRITXVZV056TG1Gc2FYbDFiaTVqYjIwdgpiMk56Y0RBMUJnTlZIUjhFTGpBc01DcWdLS0FtaGlSb2RIUndPaTh2WTJWeWRITXVZV056TG1Gc2FYbDFiaTVqCmIyMHZjbTl2ZEM1amNtd3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSjcvVXA1ZDlORXhwNCtKWlErQlZlYjcKY2VGTHptMEc3TCs1anNKZ3dka0UweWNvTSsyUFowSnI2cmRJZWticE9weVZNSllTNVhBZHNsSHhNK21MRTFybwpYbE42cWpGNVVsbE9oVjllanRZSVh6T0JsZ1FXd2VDeTU2djRsSlhoVmpKM1REMlFHVVl3alZaaVJ2ZzBuUC9SCmM3anlFT2RmOHdxZFBOa20xaTdBMXNLZksvVFJVZ3BSWDRJTW9xbURxZjZqd0k4clJxOGpQb1BsMXNTOFdEbjAKVGV6QVQ0R0JuMGZTMWRoeEhnd3RwNmJERkcveFozVFY4SDcydkZ2U0toU1FKRzNrN1JRSFFHQWhwZ01aU3dOeQpITVNSeUVmVTRlUTRmMlYrQ3hCL1YvTWQzczVTS0xyZ2E2UElVMmV4cVl6U1VqOHJreHJmbktrbGU5djdzZHc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
		//CertData: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUekNDQWplZ0F3SUJBZ0lVTnQ5ZlVKRnBiRk85OW9mTlI3K1Y1Z25MeHJjd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0dERVdNQlFHQTFVRUF4TU5hM1ZpWlhKdVpYUmxjeTFqWVRBZUZ3MHlNVEEwTWpNd01EVTJNREJhRncwMApPREE1TURnd01EVTJNREJhTURReEZ6QVZCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6TVJrd0Z3WURWUVFECkV4QnJkV0psY201bGRHVnpMV0ZrYldsdU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQTI2V01wRk5iZzZCUmJFbDlYd1dzZVd1V28rbEFaVTFad1BrZUw3bE1ZUzFrd0dLQmUxKys0Z21mV0E4dAoyd0UxcFp0cDB2SGhhWlFWWG5wTDhJK2NUQVZIR2kxOUpKaDRwSHo4dWFUSHBpUjcyNlRXdTc4N1FOM3pMY2JnCmwzSXRDU3Z2TmJZUjc4cXJuMjRIdUd3TjhKOE5NY0tSR0Z3dWo3WXpGMXFaSkMrRTJIS2c0NUMzZVJEZHVPamQKamhEakhvbE5PYU5HRXh1SU5JSVlIK0JqSE1YVFlOZHMxdWdhL0hOVW1NQ053R3JiZFA3RjY2ZWh1aDZJdXN3TAp6L01IaU9NK0IrS29hY2ZCWW9nbUdhVTk0VC9qaHZXRHR2ZGh6Ujg0NHU1YVV1b1dNYWFSSW1zWXcrWHdhRW5kCjV3Ukk3WEJHK0hUaHJDZzBWMEFKQnBkZC9RSURBUUFCbzNVd2N6QU9CZ05WSFE4QkFmOEVCQU1DQmFBd0V3WUQKVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWRCZ05WSFE0RUZnUVVXWkFYOHgxNApFNzJMNGdudWJmSjlVeGFPbnBzd0h3WURWUjBqQkJnd0ZvQVVKNExNL1IwdFk3K2hKcXZSQjZjMDd5c3gvelF3CkRRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEMHg5enZCTGJIcjJjZEtmZE9JakxRcThDWmNveUp1aDBpL2pob2wKUCtKOHdWOVNBdUU4VDBNdXN3SjRWdTErWjNtNVFjLzVjbnpueVV3SCtFbWw4ZnQ0SnZoTTV5a3NWalhMQ1ZHMwpwRlpvUVRrQllDS0VyeldHUk5VNGVGakwwL0FlS214WHRJU2pUNnJsdm9SS0s1bXo5WHREb1cyN0JEb3Z1UTJSCjMrRlBkK1d1V3hiUzRZSXJuNFlRc2s3dGl1NnlROWdKTHAyN3Q1K2pHc1NtUlNzNHNyaWFRM1NJOUVGc202cEcKQ3ZkUmVUdnplMVp4RzlRMTJSUy9VVkFoenhZLzZOT1RTd25xdkthV2JYcUk3R29nVFc5S2pLdDMwajVXTHppZgoyNXZXd1FHbHAwRC85R01IeVAvUGhxRzMvbVl4dThJNVhMY2lJcnpaNTZjQkh4Yz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
		//KeyData:  "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBMjZXTXBGTmJnNkJSYkVsOVh3V3NlV3VXbytsQVpVMVp3UGtlTDdsTVlTMWt3R0tCCmUxKys0Z21mV0E4dDJ3RTFwWnRwMHZIaGFaUVZYbnBMOEkrY1RBVkhHaTE5SkpoNHBIejh1YVRIcGlSNzI2VFcKdTc4N1FOM3pMY2JnbDNJdENTdnZOYllSNzhxcm4yNEh1R3dOOEo4Tk1jS1JHRnd1ajdZekYxcVpKQytFMkhLZwo0NUMzZVJEZHVPamRqaERqSG9sTk9hTkdFeHVJTklJWUgrQmpITVhUWU5kczF1Z2EvSE5VbU1DTndHcmJkUDdGCjY2ZWh1aDZJdXN3THovTUhpT00rQitLb2FjZkJZb2dtR2FVOTRUL2podldEdHZkaHpSODQ0dTVhVXVvV01hYVIKSW1zWXcrWHdhRW5kNXdSSTdYQkcrSFRockNnMFYwQUpCcGRkL1FJREFRQUJBb0lCQUJYTzR4N3hzOVZtMW83RQo0VERORkduZDE5QWdlYWRWUGNNZU9QUU9GdHBUTW55eml4MmZ6UWtPWVliUnd3REtwdlB4Y1ZsamNMa1YzZVZLCmlUMnlWSmRyc3JxVHA2ZzVoMGoxcS9ZV3VVZnl1V1YrZ1YrVXhpSlRwekIxWFpsTDJkTGVUTnJ0WCt5S0YrNDEKYzRqSkdiMDVYWXNDUVh2RXMwN0xqVmtWUXIxSDExNDhOMWVJYXJyWjVGbkg4dVBHdDZLNWhJOXlsVHlYekZWMgpDZDc4WUw4U3NYTENCS2JYdzNpOGVSZForSEZWUnprSHVCa1JvcC9LTHNEOUxnUDdSZC9XOE8xZGxtQjVPcCtBCnlZbm5DYXVtQzFLL3ZtTXFTWEMreWc1UXoycFFTYzlwUjNRWGhma3dyWmhhNXRDVTltWlJQbDQ5anNldVpsWTgKekdlSGE5VUNnWUVBL09SSFk3T0ZuUG93Q3ZRcVlLZU8yVVgzOUpEeTFIR3pvSytnelczSWFnVHc5NlZmaFlzSgprT0x6QStvYkRJNW1tL1pYZnJMektaSWhpZG9ac3RtSU4vdTNuRGZuYWx0MThtcVprVHhnb2d2SGdiSDh0R2c5CnkyOGw3NzNudGVOR3hUekMyY0RMbUE4cEU0a0FJaTk0eDhlNXNDUFY5MGF4MnRZK3hFT3FzcU1DZ1lFQTNsaXEKVk1OMzM5MTR5MktTeXFiSitxNkxVTlRKUi8vZGdGQnNGQUpOZlMvR0M0NENmWGlmMnRsK1d0YmtKVWVxY25oYwpaNlhaMFRYWUpsN2VyNkNQcEFqVWs2MHV3R1QzZVpFblk5c3BBZHhUdDE2KzdwYVRvenNSY3g1aDR6aXdRVVZYClJSUFlKeXlnbFlzZGk1VVhBMGZNTTFDaFpMTzArMVUyTXJEQlZ0OENnWUEvVzJXelNjK29zMW1EOVFZRTd4V3YKdzRMS2grSCtiWG9HUU5uMWZaS2ZWUnVWdjUyOTFFYVNRUG1IT29pS1RjYlJQaGRQaTcrMTQ0RjVpdVd6VkNKMwpmQjNWQ29CMHVmTkR4NGN2eHNPaTlYYUhQTE5GODNPLzJ0blRSVzJldVJFSzZ4MFo5dDVLKzBsY05vK05BUDJ1CmQ1QkMyOGVJU3ZMV0U2VG9BTmZzSndLQmdDUW41T0xOdWxPRDd4MmJsT1V4UkF6b2p5MEF2UTVoTkFLbWtUeWIKdDBBUkliSkZVSEJZeWgzTFdqbXBVZ1loNWp5aEI5MnU0WUdjc041a2RPKzRPME5nVURrSFkxL1R5MDVRWlVoZQpuZ2Q0YllDVy9wTkxsd3huRVlwWHVYRTZpYWJEZ05KeHpLZHFJVjdQOVdqNlFIaS9GeHlORXdHT0czTDNRMDN3CjRpK2ZBb0dBQXBRS3V2TzBnMGFwcDZWOFJkd2JBaWFtVlZFcFlHM2U3NWpxRzBncUVLU01PUFJBWUZuWG5FWUEKNVNPaUVWdFBHLzdySFlaWEZWemhVZDdtZlNiTkh2WWRiQnVjQ1dGQytsdjA5R3Z5dzhFd25jT1hCVzJwYUcxagpKa1FpbE9ORnZUR2Q0WkNYVWZlMDQzS3lMOG83bWRsZ291cU1heG1IYnhDUUlLVUlLT1E9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
		//CertData: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM4akNDQWRxZ0F3SUJBZ0lJT25IRzJnejlBMEF3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TURBNE1ETXhNREUyTURsYUZ3MHlNVEE0TURNeE1ERTJNVE5hTURReApGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1Sa3dGd1lEVlFRREV4QnJkV0psY201bGRHVnpMV0ZrCmJXbHVNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTNReUpMVzE5eE94NUMwVmYKbDJKK3d6QXNhRElmU2thQmUxWmtta05CNzdxbFBKWGdFd0ZOREwvSXo3TFFEeDNuS0pheEFvcGJvd0VBZ0VPNgpnR1VxN3BUeUx3N3EzTnl2ZU1TcVczcUhnSlhGTzB5SEdxVjZ3bFluZzBPSEJiQUpvUFFmOVkzWEJ6YzcxZUxmCjNzMDVHZUdQYVJKbE9GTVA3bXV2cXFlaEZXa2ZlYWVibVpIc1N5d0tyVmdVNUFjcDRjS1lkUHpXN3o2VFlJZHYKRFdSK0d6NCtFRzNicloyVWJvUHFKUSsxTG1NTHdGR1R6U3JEVmhJOHBGOHA5U3lvcFE2Y0RHL1hsMW9yb2tjMApSWUJiSnNPWkZqaUdKejhoRktKSWJBcExVRzlsdXIrUkx0YWh1YzdtZDh0NFFOZnROZXVZNE1sK0pLdUJjUVhMCk1LYjV0UUlEQVFBQm95Y3dKVEFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUgKQXdJd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFIb0pOZ01DU1dEYndTdFVncXkwd3NpWmxMa1NzMGFrWENSLwoybnFCZjY4VStPNkFtWG9FaGdQNlJEM3VTL0VnTXFHMjRmbU1GTHo3YTBtYnR4Q2NzajhhK0VTNk5OT0F2N3pUClNWMWw1R1JmeDl1MUlOQklITlg3US9OamJacGcrKzBXbXZjUjdINnNCTksxQkRSYW8zNEErQW1QUmY4aTBZbmYKRE00TElpZFpOVHFlQ0JrREg3TlQ3VDA3M3VyMmdaMThvYzNwY25iKzRnbDlFRStoWGZIZUpkOEpBUkxSN0ZPUwpMc0RVa1JUbVM0ZStHQXFLNkljSmN2QnFUWGNwOFJCMjZiUFpyS2VVMm9DdG9ZcUg5bjRyM1poekZzQWZCc29oCnVDa1RYSXdLZmRIMjNSZDBpQW9kV24rcTM2L0JtTkVDQkJveElhYjZxRzJCbDN3R2Qzcz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
		//KeyData:  "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBM1F5SkxXMTl4T3g1QzBWZmwySit3ekFzYURJZlNrYUJlMVprbWtOQjc3cWxQSlhnCkV3Rk5ETC9JejdMUUR4M25LSmF4QW9wYm93RUFnRU82Z0dVcTdwVHlMdzdxM055dmVNU3FXM3FIZ0pYRk8weUgKR3FWNndsWW5nME9IQmJBSm9QUWY5WTNYQnpjNzFlTGYzczA1R2VHUGFSSmxPRk1QN211dnFxZWhGV2tmZWFlYgptWkhzU3l3S3JWZ1U1QWNwNGNLWWRQelc3ejZUWUlkdkRXUitHejQrRUczYnJaMlVib1BxSlErMUxtTUx3RkdUCnpTckRWaEk4cEY4cDlTeW9wUTZjREcvWGwxb3Jva2MwUllCYkpzT1pGamlHSno4aEZLSkliQXBMVUc5bHVyK1IKTHRhaHVjN21kOHQ0UU5mdE5ldVk0TWwrSkt1QmNRWExNS2I1dFFJREFRQUJBb0lCQVFDT1RqYTF6eXBMcjIwUgpxM3lweWRnUHNxQzBCNmlMT2E2OEIxZEcxSXZMV0o1dHpaTHV5VVNnTTR1RTR2bjg4V1JTaGdpNHVQZmJqWmFUCi9JWkJpRi9HTG85bmFqUWJNZHVwWlByRFg3T0NQV2szRHNKZmppN2trM0JtbWY5LzB0K3dCZG5aVEpJazdCTVMKVkRlSmlSYjhxWENZMVNYaXg5Nld3QzdjTDRTTmNlaEtTTDFGRmxDejcwd2ZDSWpaTTZVNDVabmxUMk96OHhCMAp5YzZxeGE2dmxZMWd1Z05MdFF5azFMNzNuQ1BvY3NIRzkwZlV4SnZ6dnAvQ2U0Q256cDFhMmRXMUNwQS9UUGhhCnVSbXhWV2IwdHZpZlpNZHFTUGprWlJpMTFxYmtUc1N4VFUwMVJOOGU2U0I5MU1kdVlxaU53S0k0ZWhRWTN5MDgKclE0U3BXVUJBb0dCQU9iUGdiV1RETTVlVlFsZWlGUVJuU1REZnpLcXBSVDdoZVdMdldzdTBocnZFYmE1MEM3TQpqOVhGdTg1VVNoeU9YWGRCT3NTRHdNV1liamxwTUc3SHgreHdpRG1WUUlka1J4ak9ab0xuLzZLdktYS2FpcGROCm5UQndUY3o4RzJuTXZzekJuVlBXQ0VvYmJrV3BLUi8vc3E1Yzc1djVualN3WjBHZTltNjM5ZG5CQW9HQkFQVXMKVGc2U0RkY2xBZytQQ2lZaEFWNW1lMEJsWXptemRkd1MyTzdFeWN6bjNPcFMvMHFiOXlRQ0JiQytZdURueGhNaApQeDVKaHRIOEh5MDdFK3JhNE1IQkZqdWpzNVNDaDJ3MzBqbWNrREtIZi9SS0V2RTNVNmtGOVY4SFoxTkc1T04xCmkzWXQxeTR5T0Yzc2ZENlJzdkdPTVlMQksvTnRhaUVDaTNiYStwVDFBb0dCQU1EZHhvcGVmVVg0cDJBejRRRTIKMHJRRXRFWTNOOGpId0lRbWQ3cVhuak9wYjRqYnplMDlQRGVxaWh1SWJZRmRLUmJjcCtuTUdvcENyR0JHMkpUSgpWZkxwdWJzOFQzYVRRYUdsM3gwbUZZUHdrRmJXY2xhcUlWNTNpVnR2a3N5ZXJSVFYrTXcwUGlzR3J1ZUF5ZitXCkg4MzVsTE1tSzUvbGcvTGVqUmZKbXFOQkFvR0JBT3l6SVlrZnFRMFZSYkFQd1JTZXVOdVN4VnVlaHZXbU5SdUwKZHJUT2VLWERGSjJHRThMTVlRWDZqZFBkZTBqM2UxdnN0U3RnZ1RFcDRFK2l3Yy8wRVJuK2VLQ0xvMHkxMkZpNgphOVFETzVRTkRaT2tFRFdoM0x0S2JXS1ptei9qS2dnUDY5emsxT0pjeWQ2aitpL09LcHpiVXlHUnJnVU9sVy9aCkxSeEt2YkloQW9HQWVyb1JrVEdsQkVEUlcrVGUzdE5SeW12MEluOEQ3QXNwNDdpcTBlL2tyUG5wMndJRlk2VE0KZ1lURUhaRDk3S01Da0NtYUxxZjc3RklobXFlWlkycVZHWFBpTjF2cVBGMmlMOHA1ZzUzZlhvYXpLVjFUcE1PaApVcVUwNWZ0MkRhenhWczNldmlRUVhrZ1djQzRLaXh3d0RWc0FJdCs4cWdraGRBaW8vd1hVRUF3PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=",
		//Token: selfTokenBase64,
		//Token: "eyJhbGciOiJSUzI1NiIsImtpZCI6IkVnN0g4NXdNR0NaeTJIdG10Nmx2UzZpb0NJcFNIU3ozOTVfWmk4RnA2RUkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRpY2Utb3BlcmF0b3ItdG9rZW4teHo1em0iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGljZS1vcGVyYXRvciIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjliNDA2ZGNlLTg0OTgtNGFiNi1hZTJjLTE1NDRkNDFhODI2YiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRpY2Utb3BlcmF0b3IifQ.iz8TjiAY5LzRBk3zt3td1LcrWFP0dAqgLOFXJQ9gVxTcoFLgCzztzzKKJs2xn3q0nEyf56yFfcYcvFuW7rZ2xMvInQC-kPCOpGBpEReR-ZFdI_ONlvq-73GjZI-z-4ijUmg4ioWGe87ab3nS3ddEx4lAhWl4zqgYCVgcwIIwdXrmGWiNVbv0ar-39YbXA4zHEvOvlHGJb3Uvu_fPWzdUIWybUQfezMAqtmuQjZkDXzpIOsR9ABbwTj6dpiy0VCWwAN1r538u28vqi8u672UCMRjMSvNJHHeleUvMXB8vS4kr7pNgCgXq7T1KNfVOozHQ__uMFAqNV3wI9e-LU44hhg",
		//Token: testEnvToken,
		CertData: testEnvCertData,
		KeyData:  testEnvKeyData,
	})

	//cfg, err := restclient.GetRestConfig(&apistructs.ManageConfig{
	//	Type:     apistructs.ManageCert,
	//	Address:  "10.168.0.78:6443",
	//	Insecure: true,
	//	CertData: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUekNDQWplZ0F3SUJBZ0lVTWJVd2JsNWg0SURtZ1c1MHJGSS9HVlNJcjBVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0dERVdNQlFHQTFVRUF4TU5hM1ZpWlhKdVpYUmxjeTFqWVRBZUZ3MHlNVEExTVRrd09UUXhNREJhRncwMApPREV3TURRd09UUXhNREJhTURReEZ6QVZCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6TVJrd0Z3WURWUVFECkV4QnJkV0psY201bGRHVnpMV0ZrYldsdU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQXRoUkJENmRzVXlRZ1FKZzFYMHFKcjNEVTFBYU5xM2UxZG55dzdLNzRQREUvY0FUWndLS25kcklpS3c5SAovZE5rY3VwMTBVa1JPQlZiOUorWng0NitRcU1lUEIzK3BYYjd6Mk0rTjJHWTRUWXd3bVFPU2V0eFhmNHlIQkVDCmdNZUh5ZG16NE0rengxTW5yZVhSUC9MMUt4cnY4c1ZLWjN1MWRyeDFNclgzYXBnRldGUjVBRHRhUDlPdEQ4MlEKSjBEai9SOWJEQzJBOGtrNU05YUU4bWVMTjBSWExQZG9wMWU1WG5PR3lZZDlWZGNWd1YzRW5GNFMrTTNxYVJTVgpWckgxSVUwOUQrZGU3dzY5c2NCSWllUWNydnpaRGRkREhHdy9IL1hkQlliSEVPTmZqUXRoNjN6RVNTZGZzR05LCjBFd0VZeUZDNEZUWXhBeXRaN0dWejVqZGdRSURBUUFCbzNVd2N6QU9CZ05WSFE4QkFmOEVCQU1DQmFBd0V3WUQKVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWRCZ05WSFE0RUZnUVVOSEpDVDRnMQozRFRYZUwzOXZ5UWo1WXd6RElNd0h3WURWUjBqQkJnd0ZvQVVVejRzOVd1MXpqalVRVHJ1bEVIVEdsVUZMTUl3CkRRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBVnZyU05weVh1Yzg4TzQ0UVljSGErbHhHZnlEb0lMSThBUDJNTUMKR2ZrbXFGbDh5QXAwNVlDT0w0N1NSVHBraGNoUUlndEx0UndQTEE5dW5TWGRJRUZ4L2RmNUNnUVJDRzhCMHFlNwpabjFCOUZRa2phNzJ4bEk0WHVwTi9XamVabG1JZU5yZHRMMlBpQ1RGTkVNYVIzTGkyVVYzSGRzUjQ4MVg3eHp0ClYvYlVyOVNGWDVMd3RxQjFFNEIwRk5qemhHQk9CR1A2ZmtuNjBoaXV4NW45cm44NllncUpQOWpsdWtoKzY2TGwKZmdaMndudnlLYUJxN2tuTkpkZk1mV3hUTW56WUVKb2Y2UFNmaWRKS0lLWnZJMVZhc3FsSHUrd1hvZW1Pamk0bwpySjlGNmxaV1VGOTh3YlFNbTkwRURnUy9pNmc4SGc5bTNENXV2eUp2aTlLWFAyWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
	//	KeyData:  "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdGhSQkQ2ZHNVeVFnUUpnMVgwcUpyM0RVMUFhTnEzZTFkbnl3N0s3NFBERS9jQVRaCndLS25kcklpS3c5SC9kTmtjdXAxMFVrUk9CVmI5SitaeDQ2K1FxTWVQQjMrcFhiN3oyTStOMkdZNFRZd3dtUU8KU2V0eFhmNHlIQkVDZ01lSHlkbXo0TSt6eDFNbnJlWFJQL0wxS3hydjhzVktaM3UxZHJ4MU1yWDNhcGdGV0ZSNQpBRHRhUDlPdEQ4MlFKMERqL1I5YkRDMkE4a2s1TTlhRThtZUxOMFJYTFBkb3AxZTVYbk9HeVlkOVZkY1Z3VjNFCm5GNFMrTTNxYVJTVlZySDFJVTA5RCtkZTd3NjlzY0JJaWVRY3J2elpEZGRESEd3L0gvWGRCWWJIRU9OZmpRdGgKNjN6RVNTZGZzR05LMEV3RVl5RkM0RlRZeEF5dFo3R1Z6NWpkZ1FJREFRQUJBb0lCQVFDY1EzTzI4SlFhSXBYLwplZUhNWDFjZEYzUEFaOE5zRmpmSmNhZ1I2UFFvRElnS0prK1BjTWpTS0gwRWdYL2lpbXJaNlBpbVhkUUdVdVp4Cllnd0RaVEZLVlYzY2NFMmNTaXBBU1VjYkZvcXpOZVBRNFRnV0hwZFQrSldlMnNaUUtXNFRRT0NNbnhVR2l3b3gKeDF1M1MxYzM0RTF3Qi93Y0plS04vWjJEb1FHdkcwZXlqNVdYMyt1a3AwVGcwZ3piWmhJQWNubXM4elpMKzZITwpaUGNOcmVjY2lwaHRkTExOQXEycWEraVNEd3o3bFZ2bW1aUklSR0pqS1pKR2JUQ1BtM29Eakl4ZkVwamNkMlBiCjNmRWd2YTdUY3g2bEt1YWRkTTAwY2ZKWkR5SFE2OWxpUGkvMlArN0ExQWd0Y2tzWXZsV0luQzRzZzh6V1Rlc08Kd3dmdC8veGxBb0dCQU10TWZkc1d5Qmh4OUVkem1UUWJETlBycFU1S3RFWGFqYldsSlJDbkpQeldHME9Cc3Q4ZQpSZFNvK1gyVjVheVFoVGtSTDRvR3l5SlFaRDc0YTZKL082MGQvODhqSU5IRFBUS2RIR1cwdkZUU0htWkNlVFI2CnE0L0YrVWVIWnMzdGJwQ3BOQnR4ZDJJOW5LditBRkJJYkluUWo2UFZ3cWsyR21yNWRGdXl0azBMQW9HQkFPVkgKaitLMTViMHN5bFNBS0kzcytjcmRXdTBPbTgyU3dFeHFhTmVIR24vTnRmekMwUksvS3NLQ0l6WVZsdG5JMFg1VApqTzJmbHIzK0VXUWIxZmFRMG9UOVMrUXZJZDFBRUFHOTlSeklzdUd0cVM1OURseHhaQk9xY1crYkY5WHRmK1R1CnZUd3loR2J4a0E4ZHk3TzFnU2JrcHZTSGZNMFhUK3MvYjM3UENCOGpBb0dBYXF1SkFmTHpMTGhtRnpPVmVGeVYKSDREdWJLVVA3L01jRmVwQUIzdmNFWG42TmpLUWV6ZTBKa0EvSUdFTmNMMG4yZWlsakFQQ2hBK3dlY1g1Ry9zcwpnY3BTMWdtMWg3cXNtcWtMSkdadnh3VzFBNnp2VWRUbnZmbC9zY05lOHNBWkduaGRxZVNnWW9DM2V4czhhT09IClo4eHlBZUlBVUs3ZHI3R1NGeWN2Tmo4Q2dZQm15N0hvSEZPWGdHaHFnRmN1WXF3UDF6UzRDZyt5bUhRZERxeFkKelZzRkorN0xGM0Z6YlVBM211ODhoV3R2MDBpUjBkWGloK1dtNHkxYTY5di9ReWtQdFJ6OGZtRTVlRXAwN1h6aQozZHpOci9XbFFTNWFKZ0NQaktCMVFGenNiaUlrT3lHZXhxdDBHQ1BWa3k5TU1EbHFmYU9aQ05IY2hmSXY3KzRHCk5iNVhid0tCZ0VKNG9jM0lwTHo5N0wzUWRxRU50eks1ejFmbkxCUXZJNDM4VjY0WHExSkhqbjFHSUo1UGtnZHoKNW0xVUhhbG54Z0lEbHExZ20rVmh3b0xxUTNKOHhwZTE2dGd4dkNGQzBlQXNIYmc5TEdvT0RDN2dNWVY2SDdNTApOYjBaZHMyeTVPQzRMSk93M0Q4UzMvNG5iOW5xTm5tY1cwU0NlU0FTbVhKRDVlVElEQUhkCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
	//})
	if err != nil {
		panic(err)
	}

	client, err := clientgo.NewClientSet(cfg)
	if err != nil {
		panic(err)
	}

	//if err = watchPodProxyRetry(client); err != nil {
	//	panic(err)
	//}

	res, err := client.CustomClient.ApiExtensionsV1().CustomResourceDefinitions().Get(context.Background(),
		"dices.dice.terminus.io", metav1.GetOptions{})
	if err != nil {
		panic(err)
	}
	fmt.Println(res)
}

func main2() {
	c := ClusterMetaData{
		ClusterName: "terminus-dev",
		DisplayName: "端点开发集群",
		ClusterType: "k8s",
		ManageType:  "kubeconfig",
		ManageConfig: ManageConfig{
			Address:  "https://10.0.6.198:6443",
			Insecure: false,
			CaData:   "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKRENDQWd5Z0F3SUJBZ0lVQjJiek5Sckp3ekE4NzRmcEc3N3o5UTlORkpVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0dERVdNQlFHQTFVRUF4TU5hM1ZpWlhKdVpYUmxjeTFqWVRBZUZ3MHlNVEEwTWpNd01EVTJNREJhRncwMApPREE1TURnd01EVTJNREJhTUJneEZqQVVCZ05WQkFNVERXdDFZbVZ5Ym1WMFpYTXRZMkV3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNYV3BEc2R4MVhLWitEK0Zjb1dibCttYnBWd1FPWng4NmwKWGtjZERhM05icDJkT3pqNHNCUU9HanYzcGk1RXZzOEszVEV3emlmQ1dRQzZOS2NNUGZiQTFvTlptUUZ6Y0ZwSwpjWTNnMDhVbUxPbHhwZWtRTkJWdmk0WXI1S1A2a2xxQ1p5SkZkeXVGOW5JckhMN1E1RVIvRTNwcmMwbGhmMHBXCm5XS1Y3NVplek53NDhYVzhQZ0tUUjMyN2pQeEx5eG1yQ01PSGZwN2k5b3hEL1NkbHdaTkJ6alJWOG4zUXN2L1oKMzNuSGhQZFI3MUV3a1FtTjB4Yi9mT244SnFoanVCdXRxejRHN1Bxc055N2M1bmhlVVY0Mnc0Tk9SMHpDY1ZKZQo0N3FNRzQ5RW1WTG05MmVTYXhocmVsWHlsNXBrMVpzTG8zN2o5T05RTVpJTmo0MmFJLzBYQWdNQkFBR2paakJrCk1BNEdBMVVkRHdFQi93UUVBd0lCQmpBU0JnTlZIUk1CQWY4RUNEQUdBUUgvQWdFQ01CMEdBMVVkRGdRV0JCUW4KZ3N6OUhTMWp2NkVtcTlFSHB6VHZLekgvTkRBZkJnTlZIU01FR0RBV2dCUW5nc3o5SFMxanY2RW1xOUVIcHpUdgpLekgvTkRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVVvK1BuQVpYdVZWaElhRmphTENZSnBzUis4MDY2WHlqCkpsQ2lFSnc4YVRiQjI3ZVVXZTUrYU4yL2NrZFpWc3R5WHVnZ2RVRkdkeTJiOXhsbitwdjgwZSsxbkpHRDRGZTkKQUZQNUt6L09BbWMyZlQ5Y0Z4TmNXRjRPYUZRWmZ5ampUb0JLWjA3VXpMNXJsbVRJZUtsNCtnUnhYbXJYWmY3bgpMZGV4bjVwL2pKU29tTXV5OXU0QjVkSkZGOVdKSW4vcmZiYmtwN0pJclRMam9seFNoS1p4cFBXUk5ZWCsvRk1hCjZBTitwZkJsTTFLbUpkUEd2d3NhYzBHUExndUxJaXBpNTVoMXhZRDhPN25nZzNzSFBaVnk2b1FDS3BsZjB3M2oKT0crYVh4QU5PVDhweG5SMDBJWldZYThKdW85NC9peWFKTGs2d2JMeFZIb25WWU93UVNZNlVBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
			CertData: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUekNDQWplZ0F3SUJBZ0lVTnQ5ZlVKRnBiRk85OW9mTlI3K1Y1Z25MeHJjd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0dERVdNQlFHQTFVRUF4TU5hM1ZpWlhKdVpYUmxjeTFqWVRBZUZ3MHlNVEEwTWpNd01EVTJNREJhRncwMApPREE1TURnd01EVTJNREJhTURReEZ6QVZCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6TVJrd0Z3WURWUVFECkV4QnJkV0psY201bGRHVnpMV0ZrYldsdU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQTI2V01wRk5iZzZCUmJFbDlYd1dzZVd1V28rbEFaVTFad1BrZUw3bE1ZUzFrd0dLQmUxKys0Z21mV0E4dAoyd0UxcFp0cDB2SGhhWlFWWG5wTDhJK2NUQVZIR2kxOUpKaDRwSHo4dWFUSHBpUjcyNlRXdTc4N1FOM3pMY2JnCmwzSXRDU3Z2TmJZUjc4cXJuMjRIdUd3TjhKOE5NY0tSR0Z3dWo3WXpGMXFaSkMrRTJIS2c0NUMzZVJEZHVPamQKamhEakhvbE5PYU5HRXh1SU5JSVlIK0JqSE1YVFlOZHMxdWdhL0hOVW1NQ053R3JiZFA3RjY2ZWh1aDZJdXN3TAp6L01IaU9NK0IrS29hY2ZCWW9nbUdhVTk0VC9qaHZXRHR2ZGh6Ujg0NHU1YVV1b1dNYWFSSW1zWXcrWHdhRW5kCjV3Ukk3WEJHK0hUaHJDZzBWMEFKQnBkZC9RSURBUUFCbzNVd2N6QU9CZ05WSFE4QkFmOEVCQU1DQmFBd0V3WUQKVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWRCZ05WSFE0RUZnUVVXWkFYOHgxNApFNzJMNGdudWJmSjlVeGFPbnBzd0h3WURWUjBqQkJnd0ZvQVVKNExNL1IwdFk3K2hKcXZSQjZjMDd5c3gvelF3CkRRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEMHg5enZCTGJIcjJjZEtmZE9JakxRcThDWmNveUp1aDBpL2pob2wKUCtKOHdWOVNBdUU4VDBNdXN3SjRWdTErWjNtNVFjLzVjbnpueVV3SCtFbWw4ZnQ0SnZoTTV5a3NWalhMQ1ZHMwpwRlpvUVRrQllDS0VyeldHUk5VNGVGakwwL0FlS214WHRJU2pUNnJsdm9SS0s1bXo5WHREb1cyN0JEb3Z1UTJSCjMrRlBkK1d1V3hiUzRZSXJuNFlRc2s3dGl1NnlROWdKTHAyN3Q1K2pHc1NtUlNzNHNyaWFRM1NJOUVGc202cEcKQ3ZkUmVUdnplMVp4RzlRMTJSUy9VVkFoenhZLzZOT1RTd25xdkthV2JYcUk3R29nVFc5S2pLdDMwajVXTHppZgoyNXZXd1FHbHAwRC85R01IeVAvUGhxRzMvbVl4dThJNVhMY2lJcnpaNTZjQkh4Yz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
			KeyData:  "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBMjZXTXBGTmJnNkJSYkVsOVh3V3NlV3VXbytsQVpVMVp3UGtlTDdsTVlTMWt3R0tCCmUxKys0Z21mV0E4dDJ3RTFwWnRwMHZIaGFaUVZYbnBMOEkrY1RBVkhHaTE5SkpoNHBIejh1YVRIcGlSNzI2VFcKdTc4N1FOM3pMY2JnbDNJdENTdnZOYllSNzhxcm4yNEh1R3dOOEo4Tk1jS1JHRnd1ajdZekYxcVpKQytFMkhLZwo0NUMzZVJEZHVPamRqaERqSG9sTk9hTkdFeHVJTklJWUgrQmpITVhUWU5kczF1Z2EvSE5VbU1DTndHcmJkUDdGCjY2ZWh1aDZJdXN3THovTUhpT00rQitLb2FjZkJZb2dtR2FVOTRUL2podldEdHZkaHpSODQ0dTVhVXVvV01hYVIKSW1zWXcrWHdhRW5kNXdSSTdYQkcrSFRockNnMFYwQUpCcGRkL1FJREFRQUJBb0lCQUJYTzR4N3hzOVZtMW83RQo0VERORkduZDE5QWdlYWRWUGNNZU9QUU9GdHBUTW55eml4MmZ6UWtPWVliUnd3REtwdlB4Y1ZsamNMa1YzZVZLCmlUMnlWSmRyc3JxVHA2ZzVoMGoxcS9ZV3VVZnl1V1YrZ1YrVXhpSlRwekIxWFpsTDJkTGVUTnJ0WCt5S0YrNDEKYzRqSkdiMDVYWXNDUVh2RXMwN0xqVmtWUXIxSDExNDhOMWVJYXJyWjVGbkg4dVBHdDZLNWhJOXlsVHlYekZWMgpDZDc4WUw4U3NYTENCS2JYdzNpOGVSZForSEZWUnprSHVCa1JvcC9LTHNEOUxnUDdSZC9XOE8xZGxtQjVPcCtBCnlZbm5DYXVtQzFLL3ZtTXFTWEMreWc1UXoycFFTYzlwUjNRWGhma3dyWmhhNXRDVTltWlJQbDQ5anNldVpsWTgKekdlSGE5VUNnWUVBL09SSFk3T0ZuUG93Q3ZRcVlLZU8yVVgzOUpEeTFIR3pvSytnelczSWFnVHc5NlZmaFlzSgprT0x6QStvYkRJNW1tL1pYZnJMektaSWhpZG9ac3RtSU4vdTNuRGZuYWx0MThtcVprVHhnb2d2SGdiSDh0R2c5CnkyOGw3NzNudGVOR3hUekMyY0RMbUE4cEU0a0FJaTk0eDhlNXNDUFY5MGF4MnRZK3hFT3FzcU1DZ1lFQTNsaXEKVk1OMzM5MTR5MktTeXFiSitxNkxVTlRKUi8vZGdGQnNGQUpOZlMvR0M0NENmWGlmMnRsK1d0YmtKVWVxY25oYwpaNlhaMFRYWUpsN2VyNkNQcEFqVWs2MHV3R1QzZVpFblk5c3BBZHhUdDE2KzdwYVRvenNSY3g1aDR6aXdRVVZYClJSUFlKeXlnbFlzZGk1VVhBMGZNTTFDaFpMTzArMVUyTXJEQlZ0OENnWUEvVzJXelNjK29zMW1EOVFZRTd4V3YKdzRMS2grSCtiWG9HUU5uMWZaS2ZWUnVWdjUyOTFFYVNRUG1IT29pS1RjYlJQaGRQaTcrMTQ0RjVpdVd6VkNKMwpmQjNWQ29CMHVmTkR4NGN2eHNPaTlYYUhQTE5GODNPLzJ0blRSVzJldVJFSzZ4MFo5dDVLKzBsY05vK05BUDJ1CmQ1QkMyOGVJU3ZMV0U2VG9BTmZzSndLQmdDUW41T0xOdWxPRDd4MmJsT1V4UkF6b2p5MEF2UTVoTkFLbWtUeWIKdDBBUkliSkZVSEJZeWgzTFdqbXBVZ1loNWp5aEI5MnU0WUdjc041a2RPKzRPME5nVURrSFkxL1R5MDVRWlVoZQpuZ2Q0YllDVy9wTkxsd3huRVlwWHVYRTZpYWJEZ05KeHpLZHFJVjdQOVdqNlFIaS9GeHlORXdHT0czTDNRMDN3CjRpK2ZBb0dBQXBRS3V2TzBnMGFwcDZWOFJkd2JBaWFtVlZFcFlHM2U3NWpxRzBncUVLU01PUFJBWUZuWG5FWUEKNVNPaUVWdFBHLzdySFlaWEZWemhVZDdtZlNiTkh2WWRiQnVjQ1dGQytsdjA5R3Z5dzhFd25jT1hCVzJwYUcxagpKa1FpbE9ORnZUR2Q0WkNYVWZlMDQzS3lMOG83bWRsZ291cU1heG1IYnhDUUlLVUlLT1E9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
			Token:    "",
		},
		WildcardDomain: "dev.terminus.io",
		CloudVendor:    "alicloud-ecs",
		ExecutorConfig: map[string]ExecutorConfig{
			"K8SFLINKFORTERMINUSDEV": {
				Kind: "K8SFLINK",
				Options: map[string]string{
					"CPU_NUM_QUOTA":    "-1",
					"ENABLETAG":        "true",
					"ENABLE_ORG":       "true",
					"ENABLE_WORKSPACE": "true",
				},
			},
			"METRONOMEFORTERMINUSDEV": {
				Kind: "K8SJOB",
				Options: map[string]string{
					"CPU_NUM_QUOTA":    "-1",
					"ENABLETAG":        "true",
					"ENABLE_ORG":       "true",
					"ENABLE_WORKSPACE": "true",
				},
			},
			"MARATHONFORTERMINUSDEV": {
				Kind: "K8S",
				Options: map[string]string{
					"CPU_NUM_QUOTA":               "-1",
					"ENABLETAG":                   "true",
					"ENABLE_ORG":                  "true",
					"ENABLE_WORKSPACE":            "true",
					"DEV_CPU_SUBSCRIBE_RATIO":     "10",
					"STAGING_CPU_SUBSCRIBE_RATIO": "10",
					"TEST_CPU_SUBSCRIBE_RATIO":    "10",
					"cluster":                     "terminus-dev",
				},
			},
			"K8SSparkFORTERMINUSDEV": {
				Kind: "K8SSpark",
				Options: map[string]string{
					"CPU_NUM_QUOTA":    "-1",
					"ENABLETAG":        "true",
					"ENABLE_ORG":       "true",
					"ENABLE_WORKSPACE": "true",
					"SPARK_VERSION":    "2.4.0",
				},
			},
		},
	}
	res, err := json.Marshal(c)
	if err != nil {
		panic(err)
	}
	fmt.Println(string(res))
}

//
//func mainx() {
//	//kubeconfig, err := base64.StdEncoding.DecodeString(b64Str)
//	//if err != nil {
//	//	panic(err)
//	//}
//	//fmt.Println(len(kubeconfig))
//	//
//	//clientSet, err := clientgo.NewWithToken(selfHost, selfToken)
//	////clientSet, err := clientgo.NewWithKubeconfig(kubeconfig)
//	//if err != nil {
//	//	panic(err)
//	//}
//	//
//	//res, err := clientSet.CustomClient.RedisfailoverV1().RedisFailovers("1").List(context.Background(), metav1.ListOptions{
//	//	Limit: 1,
//	//})
//	//if err != nil {
//	//	fmt.Println(k8serrors.IsNotFound(err))
//	//	fmt.Println(k8serrors.IsUnsupportedMediaType(err))
//	//	fmt.Println(k8serrors.IsUnexpectedObjectError(err))
//	//	fmt.Println(k8serrors.IsInvalid(err))
//	//	panic(err)
//	//}
//	//
//	//fmt.Println(len(res.Items))
//	//
//	//err = clientSet.CustomClient.RedisfailoverV1().RedisFailovers("viper-dev").Delete(context.Background(), "new-redis", &metav1.DeleteOptions{})
//	//if err != nil {
//	//	panic(err)
//	//}
//
//	ca := "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKRENDQWd5Z0F3SUJBZ0lVQjJiek5Sckp3ekE4NzRmcEc3N3o5UTlORkpVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0dERVdNQlFHQTFVRUF4TU5hM1ZpWlhKdVpYUmxjeTFqWVRBZUZ3MHlNVEEwTWpNd01EVTJNREJhRncwMApPREE1TURnd01EVTJNREJhTUJneEZqQVVCZ05WQkFNVERXdDFZbVZ5Ym1WMFpYTXRZMkV3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNYV3BEc2R4MVhLWitEK0Zjb1dibCttYnBWd1FPWng4NmwKWGtjZERhM05icDJkT3pqNHNCUU9HanYzcGk1RXZzOEszVEV3emlmQ1dRQzZOS2NNUGZiQTFvTlptUUZ6Y0ZwSwpjWTNnMDhVbUxPbHhwZWtRTkJWdmk0WXI1S1A2a2xxQ1p5SkZkeXVGOW5JckhMN1E1RVIvRTNwcmMwbGhmMHBXCm5XS1Y3NVplek53NDhYVzhQZ0tUUjMyN2pQeEx5eG1yQ01PSGZwN2k5b3hEL1NkbHdaTkJ6alJWOG4zUXN2L1oKMzNuSGhQZFI3MUV3a1FtTjB4Yi9mT244SnFoanVCdXRxejRHN1Bxc055N2M1bmhlVVY0Mnc0Tk9SMHpDY1ZKZQo0N3FNRzQ5RW1WTG05MmVTYXhocmVsWHlsNXBrMVpzTG8zN2o5T05RTVpJTmo0MmFJLzBYQWdNQkFBR2paakJrCk1BNEdBMVVkRHdFQi93UUVBd0lCQmpBU0JnTlZIUk1CQWY4RUNEQUdBUUgvQWdFQ01CMEdBMVVkRGdRV0JCUW4KZ3N6OUhTMWp2NkVtcTlFSHB6VHZLekgvTkRBZkJnTlZIU01FR0RBV2dCUW5nc3o5SFMxanY2RW1xOUVIcHpUdgpLekgvTkRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVVvK1BuQVpYdVZWaElhRmphTENZSnBzUis4MDY2WHlqCkpsQ2lFSnc4YVRiQjI3ZVVXZTUrYU4yL2NrZFpWc3R5WHVnZ2RVRkdkeTJiOXhsbitwdjgwZSsxbkpHRDRGZTkKQUZQNUt6L09BbWMyZlQ5Y0Z4TmNXRjRPYUZRWmZ5ampUb0JLWjA3VXpMNXJsbVRJZUtsNCtnUnhYbXJYWmY3bgpMZGV4bjVwL2pKU29tTXV5OXU0QjVkSkZGOVdKSW4vcmZiYmtwN0pJclRMam9seFNoS1p4cFBXUk5ZWCsvRk1hCjZBTitwZkJsTTFLbUpkUEd2d3NhYzBHUExndUxJaXBpNTVoMXhZRDhPN25nZzNzSFBaVnk2b1FDS3BsZjB3M2oKT0crYVh4QU5PVDhweG5SMDBJWldZYThKdW85NC9peWFKTGs2d2JMeFZIb25WWU93UVNZNlVBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
//
//	client, err := kubernetes2.NewKubernetesClientWithConfig("https://10.0.6.198:6443", ca, nil)
//	if err != nil {
//		panic(err)
//	}
//
//	res, err := client.CoreV1().Namespaces().List(context.Background(), metav1.ListOptions{})
//	if err != nil {
//		panic(err)
//	}
//	fmt.Println(len(res.Items))
//}
//
//type rawevent struct {
//	Type   string          `json:"type"`
//	Object json.RawMessage `json:"object"`
//}
//
//func watchs(ctx context.Context) error {
//	addr := "inet://ingress-nginx.kube-system.svc.cluster.local?direct=on&ssl=on/kubernetes.default.svc.cluster.local"
//	client := httpclient.New()
//	var add, modi, del, other int
//	for {
//		var b bytes.Buffer
//		resp, err := client.Get(addr).
//			Path("/api/v1/pods").
//			Param("limit", "10").
//			Do().Body(&b)
//		if err != nil {
//			return err
//		}
//		if !resp.IsOK() {
//			content, _ := ioutil.ReadAll(&b)
//			errMsg := fmt.Sprintf("failed to get resp from k8s pods watcher, resp is not OK, body: %v",
//				string(content))
//			logrus.Errorf(errMsg)
//			return errors.New(errMsg)
//		}
//		podlist := corev1.PodList{}
//		if err := json.NewDecoder(&b).Decode(&podlist); err != nil {
//			return err
//		}
//		lastResourceVersion := podlist.ListMeta.ResourceVersion
//		body, resp, err := client.Get(addr).
//			Path("/api/v1/watch/pods").
//			Header("Portal-SSE", "on").
//			Param("fieldSelector", strutil.Join([]string{
//				"metadata.namespace!=kube-system",
//			}, ",")).
//			Param("resourceVersion", lastResourceVersion).
//			Do().
//			StreamBody()
//		fmt.Println("----> request next time.")
//		if err != nil {
//			logrus.Errorf("failed to get resp from k8s pods watcher, (%v)", err)
//			return err
//		}
//
//		if !resp.IsOK() {
//			errMsg := fmt.Sprintf("failed to get resp from k8s pods watcher, resp is not OK")
//			logrus.Errorf(errMsg)
//			return errors.New(errMsg)
//		}
//
//		decoder := json.NewDecoder(body)
//		for {
//			select {
//			case <-ctx.Done():
//				return nil
//			default:
//			}
//			e := rawevent{}
//			if err := decoder.Decode(&e); err != nil {
//				logrus.Errorf("failed to decode event: %v", err)
//				//body.Close()
//				continue
//			}
//			pod := corev1.Pod{}
//			if err := json.Unmarshal(e.Object, &pod); err != nil {
//				logrus.Errorf("failed to unmarshal event obj, err: %v, raw: %s", err, string(e.Object))
//				//body.Close()
//				continue
//			}
//
//			switch strutil.ToUpper(e.Type) {
//			case "ADDED":
//				add++
//			case "MODIFIED":
//				modi++
//			case "DELETED":
//				del++
//			default:
//				other++
//			}
//
//			fmt.Println("inet: ", add, modi, del, other)
//		}
//		if body != nil {
//			body.Close()
//		}
//	}
//}
//
func watchPodProxyRetry(clientSet *clientgo.ClientSet) error {
	ctx := context.TODO()

	curPodList, err := clientSet.K8sClient.CoreV1().Pods("").List(context.TODO(), metav1.ListOptions{Limit: 10})
	if err != nil {
		logrus.Errorf("list pod error: %v", err)
		return err
	}

	var add, modi, del, other int

	retryWatcher, err := wathchtool.NewRetryWatcher(curPodList.GetResourceVersion(), &cache.ListWatch{
		WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
			fmt.Println("reconnect at", time.Now().Local())
			options.FieldSelector = "metadata.namespace!=kube-system"
			return clientSet.K8sClient.CoreV1().Pods("").Watch(context.TODO(), options)
		},
	})

	if err != nil {
		return err
	}
	defer func() {
		retryWatcher.Stop()
		logrus.Info("retry watch pod resource done")
		retryWatcher.Done()
	}()

	for {
		select {
		case <-ctx.Done():
			break
		case res, ok := <-retryWatcher.ResultChan():
			if !ok {
				logrus.Error("watch closed")
			}

			if res.Object == nil {
				continue
			}

			pod := corev1.Pod{}
			bytePod, err := json.Marshal(res.Object)
			if err != nil {
				logrus.Errorf("failed to marshal event obj, err: %v", err)
				continue
			}
			if err = json.Unmarshal(bytePod, &pod); err != nil {
				logrus.Errorf("failed to unmarshal event obj to pod obj, err: %v", err)
				continue
			}

			switch res.Type {
			case watch.Added:
				add++
			case watch.Modified:
				modi++
			case watch.Deleted:
				del++
			case watch.Bookmark, watch.Error:
				other++
			default:
			}
		}
		fmt.Println("-------->", add, modi, del, other)
		retryWatcher.Stop()
	}

	return nil
}

func watchPodProxyNotRetry(clientSet *clientgo.ClientSet) error {
	ctx := context.TODO()

	curPodList, err := clientSet.K8sClient.CoreV1().Pods("").List(context.TODO(), metav1.ListOptions{Limit: 10})
	if err != nil {
		logrus.Errorf("list pod error: %v", err)
		return err
	}

	watcher, err := clientSet.K8sClient.CoreV1().Pods("").Watch(context.TODO(), metav1.ListOptions{
		FieldSelector:   "metadata.namespace!=kube-system",
		ResourceVersion: curPodList.ResourceVersion,
	})

	if err != nil {
		logrus.Errorf("watch pod expand kube-system namespace error: %v", err)
		return err
	}
	var add, modi, del, other int
	count := 0

	for {
		select {
		case <-ctx.Done():
			return nil
		case res, ok := <-watcher.ResultChan():
			if !ok {
				if count == 0 {
					fmt.Println("not re: chan closed at", time.Now().Local())
				}
				count++
				break
			}

			if count != 0 && ok {
				fmt.Println("not re: re connect at", time.Now().Local())
			}

			if res.Object == nil {
				continue
			}
			pod := corev1.Pod{}
			bytePod, err := json.Marshal(res.Object)
			if err != nil {
				logrus.Errorf("failed to marshal event obj, err: %v", err)
				continue
			}
			if err = json.Unmarshal(bytePod, &pod); err != nil {
				logrus.Errorf("failed to unmarshal event obj to pod obj, err: %v", err)
				continue
			}

			switch res.Type {
			case watch.Added:
				add++
			case watch.Modified:
				modi++
			case watch.Deleted:
				del++
			case watch.Bookmark, watch.Error:
				other++
			default:
			}

			fmt.Println(time.Now().Local(), "clgo not re: ", add, modi, del, other)
		}
	}
}

//
//func main1() {
//	kubeconfig, err := base64.StdEncoding.DecodeString(b64Str)
//	if err != nil {
//		panic(err)
//	}
//
//	clientSet, err := kubernetes2.NewKubernetesClientSetWithKubeConfig(kubeconfig)
//	if err != nil {
//		panic(err)
//	}
//
//	var patch struct {
//		Metadata struct {
//			Labels map[string]string `json:"labels"` // Use '*string' to cover 'null' case
//		} `json:"metadata"`
//	}
//
//	node, err := clientSet.CoreV1().Nodes().Get(context.TODO(), "node-010000006205", metav1.GetOptions{})
//	if err != nil {
//		logrus.Error(err)
//	}
//
//	nowLabels := node.ObjectMeta.Labels
//	fmt.Println(nowLabels, len(nowLabels))
//
//	patch.Metadata.Labels = map[string]string{}
//
//	patch.Metadata.Labels["scheduler/viper"] = "now"
//
//	patchData, err := json.Marshal(patch)
//	if err != nil {
//		logrus.Errorf("failed to update node labels, host: %v, err: %v", "node-010000006205", err)
//	}
//
//	_, err = clientSet.CoreV1().Nodes().Patch(context.TODO(), "node-010000006205", types.MergePatchType, patchData, metav1.PatchOptions{})
//	if err != nil {
//		logrus.Errorf("failed to update node labels, host: %v, err: %v", host, err)
//	}
//
//	node2, err := clientSet.CoreV1().Nodes().Get(context.TODO(), "node-010000006205", metav1.GetOptions{})
//	if err != nil {
//		logrus.Error(err)
//	}
//
//	newLabels := node2.ObjectMeta.Labels
//	fmt.Println(newLabels, len(newLabels))
//
//}
//
//func main2() {
//
//	clientSet, err := kubernetes2.NewKubernetesClientSetWithToken(host, token)
//	if err != nil {
//		panic(err)
//	}
//
//	res, err := clientSet.CoreV1().Services("default").List(context.TODO(), v1.ListOptions{})
//	if err != nil {
//		panic(err)
//	}
//	fmt.Println(res.Items)
//
//}
//
//func main3() {
//	config, err := rest.InClusterConfig()
//	if err != nil {
//		panic(err)
//	}
//	clientSet, err := kubernetes.NewForConfig(config)
//	if err != nil {
//		panic(err)
//	}
//
//	res, err := clientSet.CoreV1().Namespaces().List(context.TODO(), v1.ListOptions{})
//	if err != nil {
//		panic(err)
//	}
//	fmt.Println(res)
//}
//
//func main4() {
//	//b64Str := "YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSS1JFTkRRV2Q1WjBGM1NVSkJaMGxWV1VFdk1XRmxUblYzTWt3d2NuUXhkQ3N2V0VoWGFWTlhVRXgzZDBSUldVcExiMXBKYUhaalRrRlJSVXdLUWxGQmQwZEVSVmROUWxGSFFURlZSVUY0VFU1aE0xWnBXbGhLZFZwWVVteGplVEZxV1ZSQlpVWjNNSGxOVkVFd1RWUlJlRTFVVlRSTlJFSmhSbmN3TUFwUFJFRTBUWHBCZUUxVVZUUk5SRUpoVFVKbmVFWnFRVlZDWjA1V1FrRk5WRVJYZERGWmJWWjVZbTFXTUZwWVRYUlpNa1YzWjJkRmFVMUJNRWREVTNGSENsTkpZak5FVVVWQ1FWRlZRVUUwU1VKRWQwRjNaMmRGUzBGdlNVSkJVVU16VEVkSWNGTlpXVUV6U0hjM1UwUXJUbk5TTmxWRWRraHhNRlkyVDNkSWIxVUtPRTVpT1RJMGRtRTFiMnhsVjBvdmJtZGhWRWRUVFZwUmREVkZaakV6ZFZFdmIxRkhRbGxRSzJrM2VqUkdUbkJwUm5CNlRtSlFZVzVyUTFaR1NXRlRMd3BTUlVNcmJsUk5TRXBOVkhRMGRraFFiVWQ2ZEZsdWFYb3piMU55TVU5MVJqWnRabkJIUlRZMlNUQmpXams1TUdWUVIwMWxSVmh2VW0xVWFWVndVVkpvQ25GU00zQkVjMHQyZDIxSlpGQnZRakp3V0dwTVNuaEhTRFpDUlVORmJHOHJSRXRLZHpBM04zSmhSRUYyV1VGaFpVdDVkbFZMU2pGUVNVcHBOV2h6TjJNS1lVeGhiVVptWlcxSGNIRmFkR0prVkhGSWExaEpTM2RvYkdWMVpFaEhXVGxVZFhCWlNIZzVlbVp3U1daaGFUaGxOek13ZFVoM1NtUkdXazlDVVZvMk5RcHJRM2N6TVRSSldHdEZOMWg2WjJVeVZUVm9TVFpTZG5SSmFGVnVTMkZ3WWtReFFtWkhhWEpqTDNaYVdXaGxPV0pHYkdOR1FXZE5Ra0ZCUjJwYWFrSnJDazFCTkVkQk1WVmtSSGRGUWk5M1VVVkJkMGxDUW1wQlUwSm5UbFpJVWsxQ1FXWTRSVU5FUVVkQlVVZ3ZRV2RGUTAxQ01FZEJNVlZrUkdkUlYwSkNVamtLYmt4YVRIWXhWMFJuUWpWbldGRlpVMmxxYjNWRU9VVmtaMnBCWmtKblRsWklVMDFGUjBSQlYyZENVamx1VEZwTWRqRlhSR2RDTldkWVVWbFRhV3B2ZFFwRU9VVmtaMnBCVGtKbmEzRm9hMmxIT1hjd1FrRlJjMFpCUVU5RFFWRkZRV0p4U1hReWFGcFJMMnhFTm5JeldYTlBOVGhDVTBkQ1VYWnllbTkyU0c0d0NsSjJWVVo0WkZkdFppczNiRUZYZW1WQlNWTnRRMkZpV213MmMycGFVRzFSU2xwRVJEWXpZbmRwVFdGTFUxUXhhMFpaY0hrNVZTOXZZemRxT1RGd1ZEY0tOa3h4ZDBRNWNuVm1WWHBPTVVJMFZFMVpiR05XY214bFlsQmxhM2hTUzJrMVMyTlhXRGdyV1VKRGQyWkpRemRRVjJaeVYyRnNiM2szTld4cE5tTnNWQXBuU1VsVmRISXZlbmwwWVRSR09FMVNjRFZQYm1ZM1UweFhlVFJGU0M5dmJqSnBhell3SzB4VllqQjJRbTFHWkZaUFRIbFlTR3N3UXpCdlYwUndRblZHQ2tnMWJtSmtkMFpFT1RsaVNHUm9XRGg1T1RsNVdrMWlibko1Ym5CSlJVUlRPRXBVU0ZGc2NGaFFWa3BXVDNsWVJtMDNabTVvUjJSeUwyeFBPV2h3YlhrS1lURjZWVlZyTTNNM1RqQTVXbkprVkZGQ2IwMWxlRlk1Y1hWbFprdzFWQ3RJYkVKbFVXRmxkbUpLVGxkWGFVVlRURkpsYTFOUlBUMEtMUzB0TFMxRlRrUWdRMFZTVkVsR1NVTkJWRVV0TFMwdExRbz0KICAgIHNlcnZlcjogaHR0cHM6Ly8xMC4xNjguMC43ODo2NDQzCiAgbmFtZTogZGVmYXVsdC1jbHVzdGVyCmNvbnRleHRzOgotIGNvbnRleHQ6CiAgICBjbHVzdGVyOiBkZWZhdWx0LWNsdXN0ZXIKICAgIHVzZXI6IGRlZmF1bHQtYWRtaW4KICBuYW1lOiBkZWZhdWx0LXN5c3RlbQpjdXJyZW50LWNvbnRleHQ6IGRlZmF1bHQtc3lzdGVtCmtpbmQ6IENvbmZpZwpwcmVmZXJlbmNlczoge30KdXNlcnM6Ci0gbmFtZTogZGVmYXVsdC1hZG1pbgogIHVzZXI6CiAgICBjbGllbnQtY2VydGlmaWNhdGUtZGF0YTogTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVUlVla05EUVdwbFowRjNTVUpCWjBsVlZWbG5PV2x1T1dFdk1GZ3JWMWwwU2pCRUwzUlBkamRpVjNoRmQwUlJXVXBMYjFwSmFIWmpUa0ZSUlV3S1FsRkJkMGRFUlZkTlFsRkhRVEZWUlVGNFRVNWhNMVpwV2xoS2RWcFlVbXhqZVRGcVdWUkJaVVozTUhsTlZFRXdUVlJSZUUxVVZUUk5SRUpoUm5jd01BcFBSRUUwVFhwQmVFMVVWVFJOUkVKaFRVUlJlRVo2UVZaQ1owNVdRa0Z2VkVSdVRqVmpNMUpzWWxSd2RGbFlUakJhV0VwNlRWSnJkMFozV1VSV1VWRkVDa1Y0UW5Ka1YwcHNZMjAxYkdSSFZucE1WMFpyWWxkc2RVMUpTVUpKYWtGT1FtZHJjV2hyYVVjNWR6QkNRVkZGUmtGQlQwTkJVVGhCVFVsSlFrTm5TME1LUVZGRlFYUTJaVmg1TUc5d2FrdEhhekpIUzBvMlYwaFdPVlFyVEdrdlNHUldaRk5aTkdkeWJVUnVPRnB6WldnMWR6RmhSV3d6YWxaUFptcHdkazEwVndwUWQxQm5iWG96ZGlzeGFVaEJSMkl3TUZwcldHaG1kblJYVGswMGFuaHlWWEpMZDNoRFF6TnhiR3QxV0M5dFYwSkhPV2RVWjJOUU5HMURaR1JrYmpCeENraFVVMll4VlVwaWR6SmlhbXhyYW05eVVHOVhPVVJvV0RsVFp6TkRPVXR6WkhoT1VsUXpXV292YzJNMFJtOVpZV052ZVVZd2VWQlVWWGcwTURKNmRHb0tWbTFYY0dSSmRUUTRXVkpJVFRRMlduWTRkRVVyT1ZOc1QyczJhamR6ZDNCS2VXRk9lbFphUkM4NFpsUnpSakIzTm1aa2NsUjBXVTAyYmxrek9WTTBUd3B1ZDFSR05UZEhUbFZxVTJWMWNUZE1RM0ZVVVdaelV6bDNlWFIwUTBSM1QydGFhV0pSVlVWS2FsSjFielpOZGxwRllVOXpaVFF5YkVGRVVqbFFaRVE0Q2pGTGQwMVNVRFptYmpaQlMyRmFTbE0xTkd4WE1VUjNNbU5SU1VSQlVVRkNiek5WZDJONlFVOUNaMDVXU0ZFNFFrRm1PRVZDUVUxRFFtRkJkMFYzV1VRS1ZsSXdiRUpCZDNkRFoxbEpTM2RaUWtKUlZVaEJkMGwzUkVGWlJGWlNNRlJCVVVndlFrRkpkMEZFUVdSQ1owNVdTRkUwUlVablVWVjJNVTFtVDNReFR3cERRa0pCYTNZMGVqQjRUekl2V0c1UFZYbEZkMGgzV1VSV1VqQnFRa0puZDBadlFWVm1Xbmt5VXpjNVZtYzBRV1ZaUmpCSFJXOXZOa3huTDFKSVdVbDNDa1JSV1VwTGIxcEphSFpqVGtGUlJVeENVVUZFWjJkRlFrRkZLM1ZaT0Rkc1pGUTBiQzkyWXpJMGVVUktjV2gyYzFweVkycFNabW92YkhGMlZFOXpiVFVLYzBSVmVVZFJVRXh1TlVwNlNXSnRaRmwxTW1weVZWTTJka1UwYVUxUk1YTXZjRWRFUVRkQ1VESlpWRkE1WWxsalZXOXVSWFpEUlZOT05EUnBhM0ZzZWdwaFZqWXpWbkIwYUhsMWJXdFFRMWxoUVRNMVJFVXhTRVZEVlRaSEwyZERTWGRqZUZwQ0wxaE9UbTVKVGs4MGQweEpUMUZXU1hKVGRscHBkbFpvVGpGaUNqRlhMMUJKVEhwS1ZYaHdWRUY2ZG1SblZXTlhUVU5WUTI1WFFrWnlka1I1TnpGV2NteFFlaTlLZG14VlFuVkJXRkJLVDFCR2RIWk5ZWEV3TWxod1YzSUtlV1YzVmtSeFZHVldkVU4xTkhONVlqZFJNbTVtUmpGVWJVaE9NM2hIY1hwR2VWRjBhamRCWlhWRmNVRTRObkJCTWpaS2JuSXZRbFphU1VsdVJHTlZSQW8yVVVWbFNFZG9abVp0UjBSUGNqWjFUa3RvTUd0WmMxWTJRM2g1UVRjNFNDdHRkMjR2WjJwSldGcHVSWGh0T0QwS0xTMHRMUzFGVGtRZ1EwVlNWRWxHU1VOQlZFVXRMUzB0TFFvPQogICAgY2xpZW50LWtleS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJTVTBFZ1VGSkpWa0ZVUlNCTFJWa3RMUzB0TFFwTlNVbEZjRUZKUWtGQlMwTkJVVVZCZERabFdIa3diM0JxUzBkck1rZExTalpYU0ZZNVZDdE1hUzlJWkZaa1UxazBaM0p0Ukc0NFduTmxhRFYzTVdGRkNtd3phbFpQWm1wd2RrMTBWMUIzVUdkdGVqTjJLekZwU0VGSFlqQXdXbXRZYUdaMmRGZE9UVFJxZUhKVmNrdDNlRU5ETTNGc2EzVllMMjFYUWtjNVoxUUtaMk5RTkcxRFpHUmtiakJ4U0ZSVFpqRlZTbUozTW1KcWJHdHFiM0pRYjFjNVJHaFlPVk5uTTBNNVMzTmtlRTVTVkROWmFpOXpZelJHYjFsaFkyOTVSZ293ZVZCVVZYZzBNREo2ZEdwV2JWZHdaRWwxTkRoWlVraE5ORFphZGpoMFJTczVVMnhQYXpacU4zTjNjRXA1WVU1NlZscEVMemhtVkhOR01IYzJabVJ5Q2xSMFdVMDJibGt6T1ZNMFQyNTNWRVkxTjBkT1ZXcFRaWFZ4TjB4RGNWUlJabk5UT1hkNWRIUkRSSGRQYTFwcFlsRlZSVXBxVW5Wdk5rMTJXa1ZoVDNNS1pUUXliRUZFVWpsUVpFUTRNVXQzVFZKUU5tWnVOa0ZMWVZwS1V6VTBiRmN4UkhjeVkxRkpSRUZSUVVKQmIwbENRVkZEZWpjMU0waGlWMlk0UVhwMVVncFVhVzh3TkUxb1UwOTFiM05QVGtwVmFqZEZhV1IxT0dvNFRqbHdPRmt5Y2taM09XUnZUMDgwYjNWdVVFMWhTRlZ3TmxobFRTOWlNbGRoZDJKa2MxRlRDbll4TTA5NGFDdHlWVmhqZFhKdGEwVnlUV2d4WWxKa1ZVaGphRlJXV0hkRWJtUmhkVFI1VTJwWWNEUjRkM3AzU2pGVk9YTkZSa2czZUhOcVozRTFjR01LVERoT2FHb3ZjVTVzWkUxdk5FVmFaR1pETTBWSWMyNTRhVFZ4YlZwU04zVlJSMlpoUkVOMlUxSlpia2xETkhvdlRVc3hiVnBNWWxwSVMyNVFRelpaU3dwc1NFMXFNbEJwUlVWelJGWjNLekZIVVc1MGMxRjZlazVUYlc1UFZVcE5UV051VDBnNGFtWkZOM1p1TjAxTU9UUmphVWxrTlhFd2JIcEVLMVFyUzBGcENtaGpZV1UwTVV0SmNrNVdaRVppUmtKamVuVk9kbEpMYTFoNU9HWlZVbmR6Tlhack4xcHBia2xvTlhOYVVTdGlVSGxMYVU1TVZIZGhTbTB5ZG5WVWJqUUtPVVE0Vm5CRFFYQkJiMGRDUVUxaGVYRnlWMDFDWW1KSlpFTTNXbUpETmxSSFVHSmFaekkyYzI5cVNHaExMM0JCT0M5U1pHeFpOWFJwZVdkQlZVbEVTQXBzYW1GUGJuWjVTbmMxZWtsd05FOHdiazkxUTJSb1RUZEZkMGRWUldkalkxaDFRVEV4VG1kNVZHOHJRMGx5VGpCb1VGSnJTV3hrVmpWQ1draHFUR3RFQ2tFMWFGTlVlVkJrV0RSR2N6QlZhRXRaVUVoaWQxY3JOVkZIWXpocU4wb3hNVnBEUm1zeU1WRkhWWGREVmpKT1JHcEhSMWh6TmtVM1FXOUhRa0ZQZVdVS1ZYRmhhU3RsVFV0WmFsZzRkalpyZW5KU2JGbElXa1U0Y0dWeVEwNXRWbFJVTVdsbVlWRkhUbkV5YUZGWFpFbFNWakp4TWpCTVNVeHFOV1VyYkVWRE5BcGFZMUYxVEUxNmJWRnlSVVZMWkRaS1QwWlhhRzQ0Tm1ocGFXNWhVbHBKTUVkRE9EQmFMMGszWW1OUEwxVjZkM0k0TmxsbVVGZDVRMjl5Y0VvMFRsQTFDbFJOVWpobloxaFhhVzA0YVVOb2NIYzFTV2QwSzJoRlRqUnFVazU0UTBOT1NtNUpXRmR6ZUVSQmIwZENRVXBoYWpSb1VtUnZaamxtYm1WWVpUVk5kWGtLY21SNVNVdzRURFpyYzFWeFNqUk9SazU1TjNWMlNFbE5lblJHTWpJMVIyMTJNVmRDWW5wMVlUTnVha0pFTWpocmQxVnplbm96ZW04M2NFaHNlRzR3Y0FwdWVYaDNORE56T1U5S05VbFdWRXRyYUdsQllYZHZXbWRGWkhCeFUwZEJSSHAyWm5WbWVERTNkV1Z4VUhFeVRWcE5UVXB6YW5kNU5qY3ZOMVY0VlZSU0NsaFRZVU5tY2tWRVduZHdabEpCTVROeGNtaGhiMDAzT1VGdlIwRmhOWG81TTJkbFZrOXhjMGxUTmtaME1GcG9Ua00wTDBaemNqUjNaak53WjI1MWFYRUtNVFZXTkdac2NHVk5TVEJMY2t3eGVWVnVhR1Z3Wm5OWlJGWXlRbk0wVjNBd2RsWnNUSEpOZVdSaGREbEdNV0V4U210NmFHb3ljSE50WldoS1dqbHpSZ3BtVFV0TE1pdEpibGszVm5GT05USk9ja2R1WXpFM1REWkxNWFJoVVRBelNXMXFkeXRNYTFkTGNFVjVTVFU0YldOU2EzTlRlR2h5V1ZoQk1XRlBOblV5Q2xwdlJUQnlSakJEWjFsQk1ISlhlRVJXY2tGU2VHRXljSGhQU1VWUldUSkxTVWhaWjFwUVYxRnFiemh3WTFKb1pqQm9OVkY1TWpKRVExTTRRMVE0VGtrS1FtdGtOSG8wY21GdWJUZEdMMjFDYkM5NlJUaFdiM0ZvVWpkVlVtcEhjaXR2UzBkMWJFOHdXRzFLUXpaNGRXeDZlV05QTURaNWJtNUxlV0UwUkVoSVVncERZVlZSYmpnNFNHbFZSRFZ2VWxsR1IwMDJVRXBLYldSWFNrRXdjbEExT0hwdFJVSk5ObTlFV0ZKWE1HaFlPVlJySzBWWU1sRTlQUW90TFMwdExVVk9SQ0JTVTBFZ1VGSkpWa0ZVUlNCTFJWa3RMUzB0TFFvPQ=="
//	kubeconfig, err := base64.StdEncoding.DecodeString(b64Str)
//	if err != nil {
//		panic(err)
//	}
//
//	clientSet, err := clientgo.NewWithKubeconfig(kubeconfig)
//	if err != nil {
//		panic(err)
//	}
//
//	np, err := clientSet.CustomClient.OpenYurtV1alpha1().NodePools().List(context.TODO(), v1.ListOptions{})
//	if err != nil {
//		logrus.Error(err)
//	}
//	fmt.Println(len(np.Items))
//
//	clusters, err := clientSet.CustomClient.FlinkoperatorV1beta1().FlinkClusters("default").List(context.TODO(), v1.ListOptions{})
//	if err != nil {
//		logrus.Error(err)
//	}
//
//	fmt.Println(clusters.Items)
//
//	cf, err := clientSet.CustomClient.ConfigV1alpha2().Handlers("default").List(context.TODO(), v1.ListOptions{})
//	if err != nil {
//		logrus.Error(err)
//	}
//
//	fmt.Println(cf)
//
//	net1, err := clientSet.CustomClient.NetworkingV1alpha3().Gateways("default").List(context.TODO(), v1.ListOptions{})
//	if err != nil {
//		logrus.Error(err)
//	}
//
//	fmt.Println(net1)
//
//	net2, err := clientSet.CustomClient.NetworkingV1beta1().Gateways("default").List(context.TODO(), v1.ListOptions{})
//	if err != nil {
//		logrus.Error(err)
//	}
//
//	fmt.Println(net2)
//
//	rb, err := clientSet.CustomClient.RbacV1alpha1().ClusterRbacConfigs().List(context.TODO(), v1.ListOptions{})
//	if err != nil {
//		logrus.Error(err)
//	}
//
//	fmt.Println(rb)
//
//	se, err := clientSet.CustomClient.SecurityV1beta1().PeerAuthentications("default").List(context.TODO(), v1.ListOptions{})
//	if err != nil {
//		logrus.Error(err)
//	}
//
//	fmt.Println(se)
//}
//
//func main5() {
//	clientSet, err := clientgo.NewWithToken(host, token)
//	if err != nil {
//		panic(err)
//	}
//
//	np, err := clientSet.CustomClient.OpenYurtV1alpha1().NodePools().List(context.TODO(), v1.ListOptions{})
//	if err != nil {
//		logrus.Error(err)
//	}
//	fmt.Println(len(np.Items))
//
//	clusters, err := clientSet.CustomClient.FlinkoperatorV1beta1().FlinkClusters("default").List(context.TODO(), v1.ListOptions{})
//	if err != nil {
//		logrus.Error(err)
//	}
//
//	fmt.Println(clusters.Items)
//
//	cf, err := clientSet.CustomClient.ConfigV1alpha2().Handlers("default").List(context.TODO(), v1.ListOptions{})
//	if err != nil {
//		logrus.Error(err)
//	}
//
//	fmt.Println(cf)
//
//	net1, err := clientSet.CustomClient.NetworkingV1alpha3().Gateways("default").List(context.TODO(), v1.ListOptions{})
//	if err != nil {
//		logrus.Error(err)
//	}
//
//	fmt.Println(net1)
//
//	net2, err := clientSet.CustomClient.NetworkingV1beta1().Gateways("default").List(context.TODO(), v1.ListOptions{})
//	if err != nil {
//		logrus.Error(err)
//	}
//
//	fmt.Println(net2)
//
//	rb, err := clientSet.CustomClient.RbacV1alpha1().ClusterRbacConfigs().List(context.TODO(), v1.ListOptions{})
//	if err != nil {
//		logrus.Error(err)
//	}
//
//	fmt.Println(rb)
//
//	se, err := clientSet.CustomClient.SecurityV1beta1().PeerAuthentications("default").List(context.TODO(), v1.ListOptions{})
//	if err != nil {
//		logrus.Error(err)
//	}
//
//	fmt.Println(se)
//}
